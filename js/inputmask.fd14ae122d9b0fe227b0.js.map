{"version":3,"sources":["webpack://mockup-test/./node_modules/inputmask/lib/canUseDOM.js","webpack://mockup-test/./node_modules/inputmask/lib/defaults.js","webpack://mockup-test/./node_modules/inputmask/lib/definitions.js","webpack://mockup-test/./node_modules/inputmask/lib/dependencyLibs/data.js","webpack://mockup-test/./node_modules/inputmask/lib/dependencyLibs/events.js","webpack://mockup-test/./node_modules/inputmask/lib/dependencyLibs/extend.js","webpack://mockup-test/./node_modules/inputmask/lib/dependencyLibs/inputmask.dependencyLib.js","webpack://mockup-test/./node_modules/inputmask/lib/environment.js","webpack://mockup-test/./node_modules/inputmask/lib/eventhandlers.js","webpack://mockup-test/./node_modules/inputmask/lib/eventruler.js","webpack://mockup-test/./node_modules/inputmask/lib/global/window.js","webpack://mockup-test/./node_modules/inputmask/lib/inputHandling.js","webpack://mockup-test/./node_modules/inputmask/lib/inputmask.js","webpack://mockup-test/./node_modules/inputmask/lib/mask-lexer.js","webpack://mockup-test/./node_modules/inputmask/lib/mask.js","webpack://mockup-test/./node_modules/inputmask/lib/masktoken.js","webpack://mockup-test/./node_modules/inputmask/lib/polyfills/Array.includes.js","webpack://mockup-test/./node_modules/inputmask/lib/polyfills/Object.getPrototypeOf.js","webpack://mockup-test/./node_modules/inputmask/lib/positioning.js","webpack://mockup-test/./node_modules/inputmask/lib/validation-tests.js","webpack://mockup-test/./node_modules/inputmask/lib/validation.js"],"names":[],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;ACNY;;AAErC,iEAAe;AACf;AACA;AACA;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,oDAAiB;AACnB,EAAE,8CAAW;AACb,EAAE,yDAAsB;AACxB,EAAE,iDAAc;AAChB,EAAE,kDAAe;AACjB,EAAE,oDAAiB;AACnB,EAAE,8CAAW;AACb,EAAE,+CAAY;AACd,EAAE,+CAAY;AACd,EAAE,6CAAU;AACZ,EAAE,gDAAa;AACf,EAAE,+CAAY;AACd,EAAE,iDAAc;AAChB,EAAE,iDAAc;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;;;;;;;;ACnGD,iEAAe;AACf,OAAO;AACP;AACA;AACA,EAAE;AACF,OAAO;AACP;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACZA,6BAAe,oCAAU;AACzB;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;ACP8B;AACQ;AACgB;AACjB;;AAEJ;;AAEjC;AACA;AACA;;AAEA;AACA,WAAW,+DAAkB;AAC7B,SAAS,+DAAkB;AAC3B,CAAC;AACD,KAAK,+CAAS;AACd;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,oBAAoB,mEAAsB;AAC1C;AACA;;;AAGA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,GAAG,6BAA6B;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,IAAI,6BAA6B;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,+DAA+D,aAAa;AAC5E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA,iDAAiD,gBAAgB;AACjE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,sBAAsB,gDAAM;AAC5B;AACA,KAAK;AACL;AACA;AACA;AACA,sBAAsB,gDAAM;AAC5B;AACA;AACA,IAAI;AACJ,sDAAsD,mEAAmB;AACzE;AACA;AACA;AACA,iBAAiB,oCAAoC;AACrD;AACA;AACA;AACA,KAAK;AACL,gBAAgB,yCAAyC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACtMe;AACf;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,YAAY;AACnB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AACN;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;;AAE8B;AACQ;AACZ;AACwB;;AAElD,iBAAiB,4DAAe;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,mDAAM;AAC3D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK,uCAAE;AACP,MAAM,wCAAG;AACT,UAAU,4CAAO;AACjB;;AAEA;AACA,uBAAuB,4CAAM;AAC7B,qBAAqB,0CAAI;AACzB,sBAAsB,0CAAK;;AAE3B,iEAAe,aAAa,EAAC;;;;;;;;;;;;;;;;;;;;ACxCQ;;AAErC,YAAY,6DAAgB,IAAI,uEAA0B;AAC1D;AACA,4BAA4B,mDAAM;AAClC;AACA;;;;;;;;;;;;;;;;;;;;;;ACEuB;AACc;AACU;AACgB;AACoD;AACxD;;AAEpC;;AAEvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,oDAAU;;AAEnB,8CAA8C,wDAAc;AAC5D;;AAEA;AACA,YAAY,oDAAiB,UAAU,iDAAc,KAAK,gDAAM,UAAU,2DAAwB,yBAAyB,4CAAS,2BAA2B;AAC/J,sBAAsB;AACtB,GAAG,0DAAiB;AACpB,GAAG,2DAAW,QAAQ,wDAAc,iEAAiE,wDAAc;AACnH,GAAG,gBAAgB,8CAAW,UAAU,oDAAiB,GAAG;AAC5D;AACA,kBAAkB,uDAAa,YAAY,mEAAyB;AACpE,GAAG,oDAAU;AACb,GAAG,iBAAiB,+CAAY,0BAA0B,kDAAe,GAAG;AAC5E;AACA,GAAG,oDAAU;AACb,GAAG,uCAAuC,iDAAc,MAAM,MAAwB,IAAI,CAAS,0BAA0B;AAC7H,GAAG,wDAAQ;AACX;AACA,OAAO,iHAAiH;AACxH;AACA;AACA,GAAG,4CAA4C,8CAAW;AAC1D;AACA,cAAc,2DAAiB;AAC/B,QAAQ,2DAAY;AACpB;AACA;AACA,gBAAgB,2DAAiB;AACjC;AACA;AACA,KAAK,oDAAU;AACf;AACA,IAAI;AACJ,gBAAgB,uDAAa;AAC7B,cAAc,uDAAa;AAC3B;AACA;AACA;AACA,KAAK,oDAAU;AACf;AACA;AACA,GAAG;AACH;AACA,cAAc,gDAAa;AAC3B;AACA,qBAAqB,oDAAU;AAC/B,MAAM,oDAAU;AAChB,MAAM;AACN,KAAK,gBAAgB,+CAAY;AACjC;AACA;AACA,cAAc,gEAAsB;AACpC,YAAY,gEAAsB;AAClC;AACA;AACA,OAAO,oDAAU;AACjB,OAAO;AACP,OAAO,oDAAU;AACjB;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,gDAAa;AAC1B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mCAAmC;AACnC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,KAAK,GAAG,oDAAU;AAClB;;AAEA;AACA,mBAAmB,qDAAY;AAC/B;AACA,IAAI,2DAAiB;AACrB,wEAAwE,uDAAa;AACrF,gCAAgC;AAChC;;AAEA,6EAA6E,2DAAiB;AAC9F;;AAEA;AACA;AACA,KAAK;AACL;AACA,kBAAkB,wDAAc;AAChC,KAAK,2DAAW;AAChB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA,8CAA8C,kDAAe,kBAAkB,gDAAa;AAC5F;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA,cAAc,oDAAU;AACxB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6CAA6C,gEAAsB,gCAAgC,gEAAsB;AACzH,4CAA4C,gEAAsB,gCAAgC,gEAAsB;;AAExH,6DAA6D;AAC7D;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,wDAAQ;;AAEV;AACA,EAAE;AACF,mCAAmC;AACnC;;AAEA;AACA,OAAO,kDAAQ,GAAG;AAClB,uCAAuC,wDAAc;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,qCAAqC,QAAQ;AAC7C,kBAAkB,kEAAmB,YAAY,gEAAsB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,+MAA+M;AAC/M;AACA;AACA;AACA;AACA,QAAQ,6EAA6E;AACrF;AACA;AACA;AACA;AACA,QAAQ;AACR,gJAAgJ;AAChJ;AACA;AACA;AACA,QAAQ,oCAAoC;AAC5C;AACA,YAAY,qDAAW,YAAY,gEAAsB;AACzD,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,wDAAc,gCAAgC,wDAAc;AAC3F,cAAc,oDAAU;;AAExB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG,2DAAW,QAAQ,wDAAc;AACpC,GAAG,oDAAU;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mCAAmC;AACrE;AACA,MAAM;AACN,6BAA6B;AAC7B;AACA,MAAM;AACN;AACA;AACA;AACA,uBAAuB,oDAAiB;AACxC;AACA;AACA;AACA,KAAK,+DAAe;AACpB;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,EAAE,+DAAe;;AAEjB;AACA,GAAG,oDAAU;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,wDAAc;AAClC,IAAI,2DAAW,QAAQ,wDAAc,aAAa,uDAAa,YAAY,mEAAyB;AACpG,IAAI,mCAAmC;AACvC;AACA,KAAK;AACL;AACA,8EAA8E,wDAAe,YAAY,wDAAc,gBAAgB,mEAAyB;AAChK;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA,GAAG,uEAAuB;AAC1B;AACA,EAAE;AACF;AACA;;AAEA;AACA;AACA,0BAA0B,wEAA8B,YAAY,oDAAU;AAC9E;AACA,IAAI,oDAAU;AACd;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA,SAAS,oDAAU;;AAEnB;AACA;AACA,gCAAgC,wDAAc,wCAAwC,wDAAc;AACpG;AACA,yDAAyD;;AAEzD,EAAE,0DAAiB,mBAAmB,iDAAc;AACpD,EAAE,2DAAW,QAAQ,wDAAc;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG,uEAAuB;AAC1B;AACA,aAAa,wDAAc;;AAE3B;AACA;AACA,SAAS,mEAAyB,mCAAmC,gEAAsB;AAC3F;AACA,MAAM,OAAO;AACb,MAAM,kEAAsB;AAC5B;AACA;AACA,QAAQ,wDAAe;AACvB;AACA;AACA,MAAM;AACN;AACA,MAAM,2DAAiB;AACvB;AACA;AACA,OAAO;AACP,gBAAgB,gEAAsB;AACtC;;AAEA;AACA;;AAEA,IAAI,2DAAW;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,gEAAsB,gCAAgC,gEAAsB;AACvH;AACA;AACA;AACA;AACA,IAAI,uEAAuB;AAC3B;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA,mCAAmC,mEAAyB,uEAAuE,gEAAsB;AACzJ,2BAA2B;AAC3B;AACA,8BAA8B,wDAAe,YAAY,wDAAc;AACvE;AACA;AACA;AACA;AACA;AACA,IAAI,2DAAW,eAAe,wDAAc;AAC5C,IAAI;AACJ;AACA,EAAE;AACF;AACA;;AAEA,gCAAgC;AAChC;AACA,GAAG,+DAAe;AAClB,GAAG;AACH;AACA;;;;;;;;;;;;;;;;;;;ACrfoC;AACC;AACW;AACQ;;AAEpC;;AAEpB;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,kBAAkB;AAClB;AACA,UAAU,+CAAS;AACnB;AACA,IAAI,wOAAwO,8CAAW;AACvP;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA,kCAAkC;AAClC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,kDAAe;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,OAAO,uEAAuB,2BAA2B,gEAAsB,gCAAgC,gEAAsB;AACrI;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;;;;;;;;;AC3HqC;;AAErC,iEAAe,+CAAS,cAAc,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;ACFF;AACuC;AASrD;AAC6C;AACnC;AACa;;;AAG6D;;AAE3G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4FAA4F,gEAAsB,wBAAwB,mEAAyB;AACnK;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,mEAAoB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;;AAErC;AACA,uBAAuB,mEAAoB,gCAAgC,uDAAa;AACxF;AACA;AACA;;AAEA,oCAAoC,qDAAW;AAC/C,OAAO,2DAAY;AACnB,QAAQ,2DAAY,0CAA0C,2DAAY;AAC1E,QAAQ,2DAAY,6CAA6C,2DAAY;AAC7E,SAAS,2DAAY,8CAA8C,2DAAY;;AAE/E,oCAAoC,qDAAW;AAC/C,iBAAiB,uDAAa;AAC9B;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA,CAAC,2DAAiB;AAClB,oBAAoB;AACpB,gCAAgC,wEAA8B;AAC9D;AACA;AACA,EAAE;AACF;AACA,uBAAuB;;AAEvB;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,cAAc,mEAAyB;AACvC;AACA,cAAc,4EAAgC;;AAE9C;AACA;AACA;AACA;AACA,KAAK;AACL,cAAc,4EAAgC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wDAAc;AAC1D,2BAA2B;AAC3B;AACA,KAAK;AACL,0EAA0E,kEAAmB,oBAAoB,qDAAW;AAC5H;AACA,MAAM,wCAAwC;AAC9C;AACA;AACA;AACA,EAAE;AACF;AACA,kCAAkC,uDAAa;AAC/C,QAAQ,wDAAe,YAAY,wDAAc;AACjD,OAAO,wDAAe,YAAY,wDAAc,8GAA8G;AAC9J;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4EAAgC;AAC7C;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG,OAAO;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAc;AACnD;AACA,kEAAkE;AAClE,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK,4CAAE;AACP;AACA,gBAAgB,wDAAc;AAC9B;AACA;AACA,cAAc,mEAAyB;AACvC,mCAAmC,gEAAsB;AACzD;AACA,KAAK,uBAAuB;AAC5B;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,wDAAc,gCAAgC,wDAAc;AACnG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,IAAI,+DAAsB;AAC1B,aAAa,wDAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,oDAAU,0HAA0H,iDAAc,sBAAsB,oDAAiB;AAC5L;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,mBAAmB,gEAAsB;AACzC;AACA,KAAK,UAAU,wDAAe;AAC9B;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtPA;AACA;AACA;AACA;AACA;AACA;AAC2C;AACP;;AAER;AAC6B;AACpB;AACqB;AACP;AAC+C;AAC1D;AACgB;AAChB;AACA;AACN;AACE;;AAEpC,iBAAiB,4DAAe;;AAEhC;AACA,MAAM,gDAAS;AACf;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,4EAAC;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,cAAc,mFAAQ,SAAS;AAC/B;AACA,mCAAmC;AACnC;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA,gCAAgC;AAChC,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,sCAAsC;AACtC,0BAA0B;AAC1B;;AAEA;AACA;AACA;AACA,WAAW,+CAAQ;AACnB,cAAc,kDAAW;AACzB,YAAY;AACZ,eAAe;AACf;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mFAAQ,SAAS;AACrC,8CAA8C,mFAAQ,SAAS;AAC/D,kBAAkB,4DAAe;AACjC;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mFAAQ,SAAS;AACjD;AACA;AACA,wBAAwB,gFAAC;AACzB;;AAEA,KAAK,iFAAM;AACX,KAAK,4CAAS;AACd;AACA;AACA,GAAG;AACH;AACA,EAAE;AACF,uCAAuC;AACvC;AACA;AACA,GAAG;AACH,GAAG,mFAAQ,4BAA4B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,iCAAiC,4DAAe;AAChD;AACA;AACA,GAAG,yDAAa;AAChB,oGAAoG,wDAAc;AAClH;AACA,SAAS,8DAAkB;AAC3B,EAAE;AACF;AACA;AACA,GAAG,iFAAM,yBAAyB;AAClC;AACA,mCAAmC,6DAAa;AAChD,cAAc,gEAAsB,0DAA0D;AAC9F;AACA,GAAG,wDAAc;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF,4BAA4B;AAC5B,iCAAiC,4DAAe;AAChD,SAAS,gEAAsB;AAC/B,EAAE;AACF,8BAA8B,oDAAoD;AAClF;AACA,EAAE;AACF;AACA,iCAAiC,4DAAe;AAChD,SAAS,wDAAe,OAAO,wDAAc;AAC7C,EAAE;AACF,2BAA2B;AAC3B,iCAAiC,4DAAe;AAChD;AACA,oBAAoB,mEAAoB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA,IAAI;AACJ;AACA;AACA;AACA,EAAE;AACF;AACA,iCAAiC,4DAAe;AAChD;AACA;AACA,GAAG,yDAAa;AAChB,GAAG;AACH,wBAAwB,wDAAc,oCAAoC,wDAAc;AACxF;AACA,eAAe,wDAAc;AAC7B,WAAW,4EAAkC;AAC7C;AACA,QAAQ,WAAW;AACnB,OAAO,qDAAW;AAClB;AACA;;AAEA,SAAS,wDAAe,0CAA0C,wDAAc,oCAAoC,wDAAc;;AAElI,EAAE;AACF;AACA,iCAAiC,4DAAe;AAChD;AACA,EAAE,yDAAa;AACf,oCAAoC,wDAAc,oCAAoC,wDAAc;AACpG;AACA;AACA;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA,GAAG,gFAAC;AACJ;AACA,EAAE;AACF,cAAc,oDAAW;AACzB;;AAEA;AACA;AACA;AACA,kFAAkF;AAClF,EAAE,mFAAQ,8BAA8B;AACxC,EAAE,mFAAQ,sBAAsB;AAChC;AACA,EAAE;AACF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mDAAM;AACxB,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,oBAAoB;AAClD;;AAEA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,mFAAQ;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,mFAAQ;AACT;AACA;AACA,CAAC,mFAAQ;AACT;AACA;AACA,CAAC,mFAAQ;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,gFAAC;AACxD,EAAE;AACF;;AAEA,0BAA0B,4EAAC;;AAE3B;AACA,6DAAgB;AAChB,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClWgC;AACrB;;AAEE;;AAEtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,eAAe;AACf,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mFAAQ,SAAS;AACzC;AACA,GAAG;AACH,uBAAuB,mFAAQ,SAAS;AACxC;;AAEA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B,uCAAuC,WAAW;AACjF;AACA,yEAAyE,IAAI,wCAAwC,EAAE,cAAc,EAAE,+CAA+C,oBAAoB,cAAc;AACxN;AACA,qBAAqB,+CAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uIAAuI;AACvI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA,sBAAsB,kCAAkC;AACxD,oFAAoF;AACpF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,IAAI;;AAEJ;AACA;;AAEA;AACA;AACA;AACA;AACA,8HAA8H;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,uBAAuB,+CAAS;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA,uBAAuB,kCAAkC;AACzD,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA;AACA,wBAAwB,+CAAS;AACjC;AACA;AACA;AACA,yBAAyB,+CAAS;;AAElC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,6CAA6C,EAAE,OAAO;AACnF,yBAAyB;AACzB,6BAA6B;AAC7B,0BAA0B,+CAAS;AACnC;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA,MAAM;AACN;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,MAAM;AACN,uBAAuB,+CAAS;AAChC;AACA;AACA;AACA,+BAA+B;AAC/B;AACA,gCAAgC,+CAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC5cqC;AAC2E;AAChC;AACxC;AACK;AACL;AACM;;AAEjC;;AAEb;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,gBAAgB,mEAAyB;AACzC;AACA,QAAQ;AACR;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,QAAQ,+DAAe;AACvB;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,mEAAyB;AAChC;AACA,2BAA2B,kEAAsB,WAAW,wDAAc,iCAAiC,kEAAsB,WAAW,wDAAc;AAC1J;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK,+DAAe;AACpB;AACA;;AAEA;AACA,IAAI,sDAAa;AACjB;AACA;AACA,sCAAsC,wDAAc,wBAAwB,wDAAc,wBAAwB;AAClH,MAAM,+DAAe;AACrB;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA,yCAAyC;AACzC,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;;AAEA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,gDAAa;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,CAAC,uDAAc;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,OAAO,gDAAM,GAAG;AAChB;AACA;;AAEA;AACA,GAAG,sDAAa,eAAe,qEAAyB;AACxD,GAAG,sDAAa,cAAc,oEAAwB;AACtD,GAAG,sDAAa,aAAa,mEAAuB;AACpD,GAAG,sDAAa,cAAc,oEAAwB;AACtD,GAAG,sDAAa,gBAAgB,sEAA0B;AAC1D,GAAG,sDAAa,cAAc,oEAAwB;AACtD,GAAG,sDAAa,mBAAmB,yEAA6B;AAChE,GAAG,sDAAa,mBAAmB,yEAA6B;AAChE,GAAG,sDAAa,cAAc,oEAAwB;AACtD,GAAG,sDAAa,YAAY,kEAAsB;AAClD,GAAG,sDAAa;AAChB,GAAG,sDAAa;AAChB,GAAG,sDAAa;AAChB;AACA,IAAI,sDAAa,gBAAgB,sEAA0B;AAC3D,IAAI,sDAAa,iBAAiB,uEAA2B;AAC7D,IAAI,sDAAa,cAAc,oEAAwB;AACvD;AACA,OAAO,gDAAM;AACb;AACA;AACA,GAAG,sDAAa,cAAc,4EAAgC;AAC9D,GAAG,sDAAa,uBAAuB,6EAAiC;AACxE,uEAAuE;AACvE;AACA,EAAE,sDAAa,iBAAiB,uEAA2B;;AAE3D;AACA,EAAE,gEAAsB,qBAAqB;AAC7C;AACA;AACA;AACA,GAAG,+DAAe;AAClB,gBAAgB,wDAAc;AAC9B,OAAO,wDAAe;AACtB;AACA,KAAK,2DAAiB;AACtB;AACA;AACA;AACA,QAAQ,mEAAyB;AACjC;AACA,KAAK;AACL,KAAK,kEAAsB;AAC3B;AACA;AACA;AACA,IAAI,2DAAW;AACf;AACA,8BAA8B;AAC9B,IAAI,oDAAU,eAAe,uDAAa,YAAY,mEAAyB;AAC/E;AACA;AACA;AACA,C;;;;;;;;;;;;;;ACnPA,6BAAe,oCAAU;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;ACZA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF,C;;;;;;;;;;AC/CA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;;;;;;ACC4B;AACuB;;AAcjD;;AAEF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,0FAA0F;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAc,mEAAoB;AAClC;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC,YAAY,mEAAoB;AAChC;AACA,oCAAoC;AACpC;;AAEA;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,mEAA0B;AAChC,MAAM,4DAAa;AACnB;AACA;AACA,mBAAmB,kEAAmB;AACtC;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+DAA+D,kEAAmB;AAClF;AACA;AACA;AACA;AACA,wDAAwD,kEAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,WAAW,mEAAoB;AAC/B,oBAAoB,kEAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA,mBAAmB,mEAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,mEAAoB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,YAAY,mEAAoB;AAChC,6BAA6B,2DAAY;;AAEzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,eAAe,4DAAa;AAC5B;AACA;AACA;AACA,qBAAqB,yEAA0B,iBAAiB,4DAAa;AAC7E,wBAAwB,kEAAmB;AAC3C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAQ,2DAAY;AACpB,yBAAyB,2DAAY;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,yBAAyB,2DAAY;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClVE;;AAEF,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,oBAAoB,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC,OAAO;AAC5C;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gKAAgK;AAChK;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uFAAuF;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAkD,qCAAqC;AACvF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,IAAI;AACJ,uDAAuD;AACvD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,wFAAwF;AACxF,yBAAyB;AACzB,qBAAqB;AACrB,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,sBAAsB,uCAAuC;AAC7D;AACA;AACA;;AAEA;AACA;AACA,0DAA0D,SAAS;AACnE;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA,wEAAwE;AACxE;AACA;AACA,0BAA0B,iCAAiC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;AACtC,2CAA2C;;AAE3C;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,KAAK;AACL;AACA,8EAA8E,sFAAsF;AACpK;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,2EAA2E,iCAAiC;AAC5G;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,WAAW;AACX;AACA,GAAG;AACH;;AAEA,qDAAqD;AACrD;AACA;AACA,kDAAkD;AAClD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/hB4B;AACS;AASd;AACuB;;AAEkE;;AAEhH;AACA,yEAAyE;AACzE;AACA;AACA;AACA;;AAEA,qCAAqC;AACrC,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,8CAA8C,mEAAyB;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA,eAAe,2DAAY;AAC3B;AACA,EAAE;AACF;AACA,QAAQ,cAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB,sCAAsC,mEAAgB;AACtD;;AAEA;AACA,uBAAuB,KAAK,mEAAyB,iCAAiC;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C,sBAAsB;AACtB,GAAG,2DAAiB,kBAAkB;AACtC;AACA,cAAc,wBAAwB;AACtC,oCAAoC,mEAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC,mBAAmB;AACnB;AACA;AACA;AACA,IAAI,2DAAiB;AACrB,iBAAiB,2DAAY,yBAAyB;AACtD;AACA,8CAA8C;AAC9C,qCAAqC,YAAY;AACjD;AACA,yBAAyB,mEAAgB;AACzC;AACA;AACA;AACA;AACA;AACA,0BAA0B,KAAK,mEAAyB,iCAAiC;AACzF,KAAK,OAAO;AACZ;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,gDAAa;AACtF;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;;AAEA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,YAAY,oDAAiB;AAC7B,OAAO,iDAAc;AACrB,GAAG,gBAAgB,iDAAc;AACjC,OAAO,oDAAiB;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,mEAAyB;AACpC,gBAAgB,wDAAc,uCAAuC;AACrE;AACA;;AAEA,WAAW,oDAAiB;AAC5B;AACA,eAAe,2DAAiB;AAChC;AACA,EAAE,gBAAgB,iDAAc;AAChC;AACA,aAAa,qDAAW,iDAAiD,uDAAa;AACtF;AACA;AACA;AACA;AACA,8EAA8E,2DAAY,wDAAwD;AAClJ;AACA;AACA,2EAA2E,uDAAa,gEAAgE,mEAAyB;AACjL,cAAc,iDAAc;AAC5B;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,iDAAc;AACnC,eAAe,wEAA8B;AAC7C;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,QAAQ,4EAAkC;AAC1C,QAAQ,2DAAiB;;AAEzB;AACA;AACA,iBAAiB,UAAU;AAC3B,cAAc,mEAAoB;AAClC,oLAAoL,kEAAmB;AACvM;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B;;AAE1B;AACA,+BAA+B;AAC/B;AACA;;AAEA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,KAAK;AACL,qCAAqC,2BAA2B;AAChE,KAAK;AACL;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,EAAE,4DAAa;AACf;AACA;AACA,GAAG,wDAAc;AACjB,0CAA0C,2DAAiB;AAC3D;AACA;AACA,IAAI;AACJ,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA,UAAU,kEAAmB;AAC7B;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM,kEAAmB;;AAEzB;;AAEA,2EAA2E;AAC3E;AACA;;AAEA;AACA,kBAAkB;AAClB;;AAEA,uDAAuD;AACvD;AACA,KAAK;AACL;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,GAAG;AACH;AACA;;AAEA;AACA,oCAAoC,0BAA0B;;AAE9D;AACA,uBAAuB,6CAA6C;AACpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8CAA8C,wDAAc;AAC5D;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA,cAAc,uDAAa;AAC3B;AACA,IAAI;AACJ,kDAAkD,uDAAa,2DAA2D;AAC1H;AACA,8DAA8D,uDAAa;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qDAAW;AAC9B,2CAA2C,uDAAa,2CAA2C,eAAe;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,yEAAyE,wDAAc,sEAAsE;AAC7J;AACA,GAAG,oJAAoJ;AACvJ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,wDAAc;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,EAAE,2DAAiB;AACnB,4CAA4C,kBAAkB;AAC9D,EAAE;AACF;AACA;;AAEA;AACA;AACA;AACA,eAAe,wDAAc;AAC7B;AACA,GAAG,2DAAiB;AACpB,6CAA6C,kBAAkB;AAC/D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,4DAAa;AACvB,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,2DAAiB;AACnB,qBAAqB;AACrB;AACA;AACA,MAAM,wEAA8B,aAAa,iBAAiB;AAClE,EAAE;AACF,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,SAAS;AACzB;AACA,8BAA8B,mCAAmC;AACjE,kBAAkB,4EAAgC;AAClD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA,2BAA2B,aAAa;AACxC,mDAAmD,qDAAW;AAC9D,sBAAsB,2DAAY;AAClC;AACA,gBAAgB,4DAAa;AAC7B;AACA,oBAAoB,yEAA0B;AAC9C;AACA,4BAA4B;AAC5B,eAAe,kEAAmB;AAClC,MAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wCAAwC;AACxC,SAAS,mEAAyB;AAClC;AACA,oBAAoB;;AAEpB,eAAe,YAAY;AAC3B;AACA;AACA;;AAEA;AACA;;AAEA;AACA,2DAA2D;AAC3D;AACA;AACA;;AAEA,qCAAqC,UAAU;AAC/C;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,2DAAY,yCAAyC;AAChE,uHAAuH;AACvH,+BAA+B,wDAAc;AAC7C;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,2DAAY;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C,GAAG,2DAAiB;AACpB;AACA;AACA,EAAE,uBAAuB,2DAAY;AACrC,0DAA0D;AAC1D;;AAEA,CAAC,2DAAiB;AAClB;AACA","file":"js/inputmask.fd14ae122d9b0fe227b0.js","sourcesContent":["const canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n);\n\nexport default canUseDOM;\n","import keyCode from \"./keycode.json\";\n\nexport default {\n\t_maxTestPos: 500,\n\tplaceholder: \"_\",\n\toptionalmarker: [\"[\", \"]\"],\n\tquantifiermarker: [\"{\", \"}\"],\n\tgroupmarker: [\"(\", \")\"],\n\talternatormarker: \"|\",\n\tescapeChar: \"\\\\\",\n\tmask: null, //needs tobe null instead of undefined as the extend method does not consider props with the undefined value\n\tregex: null, //regular expression as a mask\n\toncomplete: () => {\n\t}, //executes when the mask is complete\n\tonincomplete: () => {\n\t}, //executes when the mask is incomplete and focus is lost\n\toncleared: () => {\n\t}, //executes when the mask is cleared\n\trepeat: 0, //repetitions of the mask: * ~ forever, otherwise specify an integer\n\tgreedy: false, //true: allocated buffer for the mask and repetitions - false: allocate only if needed\n\tautoUnmask: false, //automatically unmask when retrieving the value with $.fn.val or value if the browser supports __lookupGetter__ or getOwnPropertyDescriptor\n\tremoveMaskOnSubmit: false, //remove the mask before submitting the form.\n\tclearMaskOnLostFocus: true,\n\tinsertMode: true, //insert the input or overwrite the input\n\tinsertModeVisual: true, //show selected caret when insertmode = false\n\tclearIncomplete: false, //clear the incomplete input on blur\n\talias: null,\n\tonKeyDown: () => {\n\t}, //callback to implement autocomplete on certain keys for example. args => event, buffer, caretPos, opts\n\tonBeforeMask: null, //executes before masking the initial value to allow preprocessing of the initial value.\targs => initialValue, opts => return processedValue\n\tonBeforePaste: function (pastedValue, opts) {\n\t\treturn typeof opts.onBeforeMask === \"function\" ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;\n\t}, //executes before masking the pasted value to allow preprocessing of the pasted value.\targs => pastedValue, opts => return processedValue\n\tonBeforeWrite: null, //executes before writing to the masked element. args => event, opts\n\tonUnMask: null, //executes after unmasking to allow postprocessing of the unmaskedvalue.\targs => maskedValue, unmaskedValue, opts\n\tshowMaskOnFocus: true, //show the mask-placeholder when the input has focus\n\tshowMaskOnHover: true, //show the mask-placeholder when hovering the empty input\n\tonKeyValidation: () => {\n\t}, //executes on every key-press with the result of isValid. Params: key, result, opts\n\tskipOptionalPartCharacter: \" \", //a character which can be used to skip an optional part of a mask\n\tnumericInput: false, //numericInput input direction style (input shifts to the left while holding the caret position)\n\trightAlign: false, //align to the right\n\tundoOnEscape: true, //pressing escape reverts the value to the value before focus\n\t//numeric basic properties\n\tradixPoint: \"\", //\".\", // | \",\"\n\t_radixDance: false, //dance around the radixPoint\n\tgroupSeparator: \"\", //\",\", // | \".\"\n\t//numeric basic properties\n\tkeepStatic: null, //try to keep the mask static while typing. Decisions to alter the mask will be posponed if possible\n\tpositionCaretOnTab: true, //when enabled the caret position is set after the latest valid position on TAB\n\ttabThrough: false, //allows for tabbing through the different parts of the masked field\n\tsupportsInputType: [\"text\", \"tel\", \"url\", \"password\", \"search\"], //list with the supported input types\n\t//specify keyCodes which should not be considered in the keypress event, otherwise the preventDefault will stop their default behavior especially in FF\n\tignorables: [\n\t\tkeyCode.BACKSPACE,\n\t\tkeyCode.TAB,\n\t\tkeyCode[\"PAUSE/BREAK\"],\n\t\tkeyCode.ESCAPE,\n\t\tkeyCode.PAGE_UP,\n\t\tkeyCode.PAGE_DOWN,\n\t\tkeyCode.END,\n\t\tkeyCode.HOME,\n\t\tkeyCode.LEFT,\n\t\tkeyCode.UP,\n\t\tkeyCode.RIGHT,\n\t\tkeyCode.DOWN,\n\t\tkeyCode.INSERT,\n\t\tkeyCode.DELETE,\n\t\t93,\n\t\t112,\n\t\t113,\n\t\t114,\n\t\t115,\n\t\t116,\n\t\t117,\n\t\t118,\n\t\t119,\n\t\t120,\n\t\t121,\n\t\t122,\n\t\t123,\n\t\t0,\n\t\t229\n\t],\n\tisComplete: null, //override for isComplete - args => buffer, opts - return true || false\n\tpreValidation: null, //hook to preValidate the input.  Usefull for validating regardless the definition.\targs => buffer, pos, char, isSelection, opts, maskset, caretPos, strict => return true/false/command object\n\tpostValidation: null, //hook to postValidate the result from isValid.\tUsefull for validating the entry as a whole.\targs => buffer, pos, c, currentResult, opts, maskset, strict, fromCheckval => return true/false/json\n\tstaticDefinitionSymbol: undefined, //specify a definitionSymbol for static content, used to make matches for alternators\n\tjitMasking: false, //just in time masking ~ only mask while typing, can n (number), true or false\n\tnullable: true, //return nothing instead of the buffertemplate when the user hasn't entered anything.\n\tinputEventOnly: false, //dev option - testing inputfallback behavior\n\tnoValuePatching: false, //disable value property patching\n\tpositionCaretOnClick: \"lvp\", //none, lvp (based on the last valid position (default), radixFocus (position caret to radixpoint on initial click), select (select the whole input), ignore (ignore the click and continue the mask)\n\tcasing: null, //mask-level casing. Options: null, \"upper\", \"lower\" or \"title\" or callback args => elem, test, pos, validPositions return charValue\n\tinputmode: \"text\", //specify the inputmode\n\timportDataAttributes: true, //import data-inputmask attributes\n\tshiftPositions: true, //shift position of the mask entries on entry and deletion.\n\tusePrototypeDefinitions: true, //use the default defined definitions from the prototype\n\tvalidationEventTimeOut: 3000 //Time to show validation error on form submit\n};","export default {\n\t\"9\": { //\\uFF11-\\uFF19 #1606\n\t\tvalidator: \"[0-9\\uFF10-\\uFF19]\",\n\t\tdefinitionSymbol: \"*\"\n\t},\n\t\"a\": { //\\u0410-\\u044F\\u0401\\u0451\\u00C0-\\u00FF\\u00B5 #76\n\t\tvalidator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u0451\\u00C0-\\u00FF\\u00B5]\",\n\t\tdefinitionSymbol: \"*\"\n\t},\n\t\"*\": {\n\t\tvalidator: \"[0-9\\uFF10-\\uFF19A-Za-z\\u0410-\\u044F\\u0401\\u0451\\u00C0-\\u00FF\\u00B5]\"\n\t}\n}","export default function (owner, key, value) {\n\tif (value === undefined) {\n\t\treturn owner.__data ? owner.__data[key] : null;\n\t} else {\n\t\towner.__data = owner.__data || {};\n\t\towner.__data[key] = value;\n\t}\n}","import extend from \"./extend\";\nimport window from \"../global/window\";\nimport DependencyLib from \"./inputmask.dependencyLib\";\nimport canUseDOM from \"../canUseDOM\";\n\nexport {on, off, trigger, Event};\n\nfunction isValidElement(elem) {\n\treturn elem instanceof Element;\n}\n\nlet Event;\nif (typeof window.CustomEvent === \"function\") {\n\tEvent = window.CustomEvent;\n} else {\n\tif (canUseDOM) {\n\t\tEvent = function (event, params) {\n\t\t\tparams = params || {bubbles: false, cancelable: false, detail: undefined};\n\t\t\tvar evt = document.createEvent(\"CustomEvent\");\n\t\t\tevt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t\t\treturn evt;\n\t\t};\n\t\tEvent.prototype = window.Event.prototype;\n\t}\n}\n\n\nfunction on(events, handler) {\n\tfunction addEvent(ev, namespace) {\n\t\t//register domevent\n\t\tif (elem.addEventListener) { // all browsers except IE before version 9\n\t\t\telem.addEventListener(ev, handler, false);\n\t\t} else if (elem.attachEvent) { // IE before version 9\n\t\t\telem.attachEvent(\"on\" + ev, handler);\n\t\t}\n\t\teventRegistry[ev] = eventRegistry[ev] || {};\n\t\teventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [];\n\t\teventRegistry[ev][namespace].push(handler);\n\t}\n\n\tif (isValidElement(this[0])) {\n\t\tvar eventRegistry = this[0].eventRegistry,\n\t\t\telem = this[0];\n\n\n\t\tvar _events = events.split(\" \");\n\t\tfor (var endx = 0; endx < _events.length; endx++) {\n\t\t\tvar nsEvent = _events[endx].split(\".\"),\n\t\t\t\tev = nsEvent[0],\n\t\t\t\tnamespace = nsEvent[1] || \"global\";\n\t\t\taddEvent(ev, namespace);\n\t\t}\n\t}\n\treturn this;\n}\n\nfunction off(events, handler) {\n\tvar eventRegistry, elem;\n\n\tfunction removeEvent(ev, namespace, handler) {\n\t\tif (ev in eventRegistry === true) {\n\t\t\t//unbind to dom events\n\t\t\tif (elem.removeEventListener) { // all browsers except IE before version 9\n\t\t\t\telem.removeEventListener(ev, handler, false);\n\t\t\t} else if (elem.detachEvent) { // IE before version 9\n\t\t\t\telem.detachEvent(\"on\" + ev, handler);\n\t\t\t}\n\t\t\tif (namespace === \"global\") {\n\t\t\t\tfor (var nmsp in eventRegistry[ev]) {\n\t\t\t\t\teventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction resolveNamespace(ev, namespace) {\n\t\tvar evts = [],\n\t\t\thndx, hndL;\n\t\tif (ev.length > 0) {\n\t\t\tif (handler === undefined) {\n\t\t\t\tfor (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) {\n\t\t\t\t\tevts.push({\n\t\t\t\t\t\tev: ev,\n\t\t\t\t\t\tnamespace: namespace && namespace.length > 0 ? namespace : \"global\",\n\t\t\t\t\t\thandler: eventRegistry[ev][namespace][hndx]\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tevts.push({\n\t\t\t\t\tev: ev,\n\t\t\t\t\tnamespace: namespace && namespace.length > 0 ? namespace : \"global\",\n\t\t\t\t\thandler: handler\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (namespace.length > 0) {\n\t\t\tfor (var evNdx in eventRegistry) {\n\t\t\t\tfor (var nmsp in eventRegistry[evNdx]) {\n\t\t\t\t\tif (nmsp === namespace) {\n\t\t\t\t\t\tif (handler === undefined) {\n\t\t\t\t\t\t\tfor (hndx = 0, hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) {\n\t\t\t\t\t\t\t\tevts.push({\n\t\t\t\t\t\t\t\t\tev: evNdx,\n\t\t\t\t\t\t\t\t\tnamespace: nmsp,\n\t\t\t\t\t\t\t\t\thandler: eventRegistry[evNdx][nmsp][hndx]\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tevts.push({\n\t\t\t\t\t\t\t\tev: evNdx,\n\t\t\t\t\t\t\t\tnamespace: nmsp,\n\t\t\t\t\t\t\t\thandler: handler\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn evts;\n\t}\n\n\tif (isValidElement(this[0]) && events) {\n\t\teventRegistry = this[0].eventRegistry;\n\t\telem = this[0];\n\n\n\t\tvar _events = events.split(\" \");\n\t\tfor (var endx = 0; endx < _events.length; endx++) {\n\t\t\tvar nsEvent = _events[endx].split(\".\"),\n\t\t\t\toffEvents = resolveNamespace(nsEvent[0], nsEvent[1]);\n\t\t\tfor (var i = 0, offEventsL = offEvents.length; i < offEventsL; i++) {\n\t\t\t\tremoveEvent(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);\n\t\t\t}\n\t\t}\n\t}\n\treturn this;\n}\n\nfunction trigger(events /* , args... */) {\n\tif (isValidElement(this[0])) {\n\t\tvar eventRegistry = this[0].eventRegistry,\n\t\t\telem = this[0];\n\t\tvar _events = typeof events === \"string\" ? events.split(\" \") : [events.type];\n\t\tfor (var endx = 0; endx < _events.length; endx++) {\n\t\t\tvar nsEvent = _events[endx].split(\".\"),\n\t\t\t\tev = nsEvent[0],\n\t\t\t\tnamespace = nsEvent[1] || \"global\";\n\t\t\tif (document !== undefined && namespace === \"global\") {\n\t\t\t\t//trigger domevent\n\t\t\t\tvar evnt, i, params = {\n\t\t\t\t\tbubbles: true,\n\t\t\t\t\tcancelable: true,\n\t\t\t\t\tdetail: arguments[1]\n\t\t\t\t};\n\t\t\t\t// The custom event that will be created\n\t\t\t\tif (document.createEvent) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tswitch (ev) {\n\t\t\t\t\t\t\tcase \"input\":\n\t\t\t\t\t\t\t\tparams.inputType = \"insertText\";\n\t\t\t\t\t\t\t\tevnt = new InputEvent(ev, params);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tevnt = new CustomEvent(ev, params);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tevnt = document.createEvent(\"CustomEvent\");\n\t\t\t\t\t\tevnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n\t\t\t\t\t}\n\t\t\t\t\tif (events.type) extend(evnt, events);\n\t\t\t\t\telem.dispatchEvent(evnt);\n\t\t\t\t} else {\n\t\t\t\t\tevnt = document.createEventObject();\n\t\t\t\t\tevnt.eventType = ev;\n\t\t\t\t\tevnt.detail = arguments[1];\n\t\t\t\t\tif (events.type) extend(evnt, events);\n\t\t\t\t\telem.fireEvent(\"on\" + evnt.eventType, evnt);\n\t\t\t\t}\n\t\t\t} else if (eventRegistry[ev] !== undefined) {\n\t\t\t\targuments[0] = arguments[0].type ? arguments[0] : DependencyLib.Event(arguments[0]);\n\t\t\t\targuments[0].detail = arguments.slice(1);\n\t\t\t\tif (namespace === \"global\") {\n\t\t\t\t\tfor (var nmsp in eventRegistry[ev]) {\n\t\t\t\t\t\tfor (i = 0; i < eventRegistry[ev][nmsp].length; i++) {\n\t\t\t\t\t\t\teventRegistry[ev][nmsp][i].apply(elem, arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (i = 0; i < eventRegistry[ev][namespace].length; i++) {\n\t\t\t\t\t\teventRegistry[ev][namespace][i].apply(elem, arguments);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn this;\n}","export default function extend() {\n\tlet options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === \"boolean\") {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[i] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif (typeof target !== \"object\" && typeof target !== \"function\") {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; i++) {\n\t\t// Only deal with non-null/undefined values\n\t\tif ((options = arguments[i]) != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target === copy) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif (deep && copy && (Object.prototype.toString.call(copy) === \"[object Object]\" || (copyIsArray = Array.isArray(copy)))) {\n\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray(src) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && Object.prototype.toString.call(src) === \"[object Object]\" ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if (copy !== undefined) {\n\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n}","/*\n Input Mask plugin dependencyLib\n http://github.com/RobinHerbots/jquery.inputmask\n Copyright (c) Robin Herbots\n Licensed under the MIT license\n */\n\nimport extend from \"./extend\";\nimport window from \"../global/window\";\nimport data from \"./data\";\nimport { on, off, trigger, Event} from \"./events\";\n\nconst document = window.document;\n\nfunction DependencyLib(elem) {\n\tif (elem instanceof DependencyLib) {\n\t\treturn elem;\n\t}\n\tif (!(this instanceof DependencyLib)) {\n\t\treturn new DependencyLib(elem);\n\t}\n\tif (elem !== undefined && elem !== null && elem !== window) {\n\t\tthis[0] = elem.nodeName ? elem : (elem[0] !== undefined && elem[0].nodeName ? elem[0] : document.querySelector(elem));\n\t\tif (this[0] !== undefined && this[0] !== null) {\n\t\t\tthis[0].eventRegistry = this[0].eventRegistry || {};\n\t\t}\n\t}\n}\n\nDependencyLib.prototype = {\n\ton: on,\n\toff: off,\n\ttrigger: trigger\n};\n\n//static\nDependencyLib.extend = extend;\nDependencyLib.data = data;\nDependencyLib.Event = Event;\n\nexport default DependencyLib;\n","import window from \"./global/window\";\n\nconst ua = (window.navigator && window.navigator.userAgent) || \"\",\n\tie = (ua.indexOf(\"MSIE \") > 0) || (ua.indexOf(\"Trident/\") > 0),\n\tmobile = \"ontouchstart\" in window, //not entirely correct but will currently do\n\tiemobile = /iemobile/i.test(ua),\n\tiphone = /iphone/i.test(ua) && !iemobile;\n\nexport {ua, ie, mobile, iemobile, iphone};","import {\n\tcaret, determineNewCaretPosition,\n\tgetBuffer, getBufferTemplate,\n\tgetLastValidPosition, isMask,\n\tresetMaskSet,\n\tseekNext,\n\tseekPrevious,\n\ttranslatePosition\n} from \"./positioning\";\nimport keyCode from \"./keycode.json\";\nimport {iemobile, iphone} from \"./environment\";\nimport {handleRemove, isComplete, isValid} from \"./validation\";\nimport {applyInputValue, checkVal, clearOptionalTail, HandleNativePlaceholder, writeBuffer} from \"./inputHandling\";\nimport {getPlaceholder, getTest} from \"./validation-tests\";\n\nexport {EventHandlers};\n\nvar EventHandlers = {\n\tkeydownEvent: function (e) {\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts, $ = inputmask.dependencyLib,\n\t\t\tmaskset = inputmask.maskset;\n\n\t\tvar input = this,\n\t\t\t$input = $(input),\n\t\t\tk = e.keyCode,\n\t\t\tpos = caret.call(inputmask, input);\n\n\t\tvar kdResult = opts.onKeyDown.call(this, e, getBuffer.call(inputmask), pos, opts);\n\t\tif (kdResult !== undefined) return kdResult;\n\n\t\t//backspace, delete, and escape get special treatment\n\t\tif (k === keyCode.BACKSPACE || k === keyCode.DELETE || (iphone && k === keyCode.BACKSPACE_SAFARI) || (e.ctrlKey && k === keyCode.X && !(\"oncut\" in input))) { //backspace/delete\n\t\t\te.preventDefault(); //stop default action but allow propagation\n\t\t\thandleRemove.call(inputmask, input, k, pos);\n\t\t\twriteBuffer(input, getBuffer.call(inputmask, true), maskset.p, e, input.inputmask._valueGet() !== getBuffer.call(inputmask).join(\"\"));\n\t\t} else if (k === keyCode.END || k === keyCode.PAGE_DOWN) { //when END or PAGE_DOWN pressed set position at lastmatch\n\t\t\te.preventDefault();\n\t\t\tvar caretPos = seekNext.call(inputmask, getLastValidPosition.call(inputmask));\n\t\t\tcaret.call(inputmask, input, e.shiftKey ? pos.begin : caretPos, caretPos, true);\n\t\t} else if ((k === keyCode.HOME && !e.shiftKey) || k === keyCode.PAGE_UP) { //Home or page_up\n\t\t\te.preventDefault();\n\t\t\tcaret.call(inputmask, input, 0, e.shiftKey ? pos.begin : 0, true);\n\t\t} else if (((opts.undoOnEscape && k === keyCode.ESCAPE) || (false && k === keyCode.Z && e.ctrlKey)) && e.altKey !== true) { //escape && undo && #762\n\t\t\tcheckVal(input, true, false, inputmask.undoValue.split(\"\"));\n\t\t\t$input.trigger(\"click\");\n\t\t\t// } else if (k === keyCode.INSERT && !(e.shiftKey || e.ctrlKey) && inputmask.userOptions.insertMode === undefined) { //insert\n\t\t\t// \topts.insertMode = !opts.insertMode;\n\t\t\t// \tcaret(input, pos.begin, pos.end);\n\t\t} else if (opts.tabThrough === true && k === keyCode.TAB) {\n\t\t\tif (e.shiftKey === true) {\n\t\t\t\tpos.end = seekPrevious.call(inputmask, pos.end, true);\n\t\t\t\tif (getTest.call(inputmask, pos.end - 1).match.static === true) {\n\t\t\t\t\tpos.end--;\n\t\t\t\t}\n\t\t\t\tpos.begin = seekPrevious.call(inputmask, pos.end, true);\n\t\t\t\tif (pos.begin >= 0 && pos.end > 0) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcaret.call(inputmask, input, pos.begin, pos.end);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpos.begin = seekNext.call(inputmask, pos.begin, true);\n\t\t\t\tpos.end = seekNext.call(inputmask, pos.begin, true);\n\t\t\t\tif (pos.end < maskset.maskLength) pos.end--;\n\t\t\t\tif (pos.begin <= maskset.maskLength) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tcaret.call(inputmask, input, pos.begin, pos.end);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!e.shiftKey) {\n\t\t\tif (opts.insertModeVisual && opts.insertMode === false) {\n\t\t\t\tif (k === keyCode.RIGHT) {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tvar caretPos = caret.call(inputmask, input);\n\t\t\t\t\t\tcaret.call(inputmask, input, caretPos.begin);\n\t\t\t\t\t}, 0);\n\t\t\t\t} else if (k === keyCode.LEFT) {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tvar caretPos = {\n\t\t\t\t\t\t\tbegin: translatePosition.call(inputmask, input.inputmask.caretPos.begin),\n\t\t\t\t\t\t\tend: translatePosition.call(inputmask, input.inputmask.caretPos.end)\n\t\t\t\t\t\t};\n\t\t\t\t\t\tif (inputmask.isRTL) {\n\t\t\t\t\t\t\tcaret.call(inputmask, input, caretPos.begin + (caretPos.begin === maskset.maskLength ? 0 : 1));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcaret.call(inputmask, input, caretPos.begin - (caretPos.begin === 0 ? 0 : 1));\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tinputmask.ignorable = opts.ignorables.includes(k);\n\t},\n\tkeypressEvent: function (e, checkval, writeOut, strict, ndx) {\n\t\tconst inputmask = this.inputmask || this, opts = inputmask.opts, $ = inputmask.dependencyLib,\n\t\t\tmaskset = inputmask.maskset;\n\n\t\tvar input = inputmask.el,\n\t\t\t$input = $(input),\n\t\t\tk = e.which || e.charCode || e.keyCode;\n\n\t\tif (checkval !== true && (!(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || inputmask.ignorable))) {\n\t\t\tif (k === keyCode.ENTER && inputmask.undoValue !== inputmask._valueGet(true)) {\n\t\t\t\tinputmask.undoValue = inputmask._valueGet(true);\n\t\t\t\t// e.preventDefault();\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t$input.trigger(\"change\");\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\tinputmask.skipInputEvent = true; //skip the input as otherwise the skipped char could be picked up for validation by the inputfallback\n\t\t\treturn true;\n\t\t} else if (k) {\n\t\t\t//special treat the decimal separator\n\t\t\tif ((k === 44 || k === 46) && e.location === 3 && opts.radixPoint !== \"\") k = opts.radixPoint.charCodeAt(0);\n\t\t\tvar pos = checkval ? {\n\t\t\t\t\tbegin: ndx,\n\t\t\t\t\tend: ndx\n\t\t\t\t} : caret.call(inputmask, input),\n\t\t\t\tforwardPosition, c = String.fromCharCode(k);\n\n\t\t\tmaskset.writeOutBuffer = true;\n\t\t\tvar valResult = isValid.call(inputmask, pos, c, strict, undefined, undefined, undefined, checkval);\n\t\t\tif (valResult !== false) {\n\t\t\t\tresetMaskSet.call(inputmask, true);\n\t\t\t\tforwardPosition = valResult.caret !== undefined ? valResult.caret : seekNext.call(inputmask, valResult.pos.begin ? valResult.pos.begin : valResult.pos);\n\t\t\t\tmaskset.p = forwardPosition; //needed for checkval\n\t\t\t}\n\n\t\t\tforwardPosition = ((opts.numericInput && valResult.caret === undefined) ? seekPrevious.call(inputmask, forwardPosition) : forwardPosition);\n\t\t\tif (writeOut !== false) {\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\topts.onKeyValidation.call(input, k, valResult);\n\t\t\t\t}, 0);\n\t\t\t\tif (maskset.writeOutBuffer && valResult !== false) {\n\t\t\t\t\tvar buffer = getBuffer.call(inputmask);\n\t\t\t\t\twriteBuffer(input, buffer, forwardPosition, e, checkval !== true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\te.preventDefault();\n\n\t\t\tif (checkval) {\n\t\t\t\tif (valResult !== false) valResult.forwardPosition = forwardPosition;\n\t\t\t\treturn valResult;\n\t\t\t}\n\t\t}\n\t},\n\tkeyupEvent: function (e) {\n\t\tconst inputmask = this.inputmask;\n\n\t\tif (inputmask.isComposing && (e.keyCode === keyCode.KEY_229 || e.keyCode === keyCode.ENTER)) {\n\t\t\tinputmask.$el.trigger(\"input\");\n\t\t}\n\t},\n\tpasteEvent: function (e) {\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts;\n\n\t\tvar input = this,\n\t\t\tinputValue = inputmask._valueGet(true),\n\t\t\tcaretPos = caret.call(inputmask, input),\n\t\t\ttempValue;\n\n\t\tif (inputmask.isRTL) {\n\t\t\ttempValue = caretPos.end;\n\t\t\tcaretPos.end = caretPos.begin;\n\t\t\tcaretPos.begin = tempValue;\n\t\t}\n\n\t\tvar valueBeforeCaret = inputValue.substr(0, caretPos.begin),\n\t\t\tvalueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);\n\n\t\tif (valueBeforeCaret == (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).slice(0, caretPos.begin).join(\"\")) valueBeforeCaret = \"\";\n\t\tif (valueAfterCaret == (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).slice(caretPos.end).join(\"\")) valueAfterCaret = \"\";\n\n\t\tif (window.clipboardData && window.clipboardData.getData) { // IE\n\t\t\tinputValue = valueBeforeCaret + window.clipboardData.getData(\"Text\") + valueAfterCaret;\n\t\t} else if (e.clipboardData && e.clipboardData.getData) {\n\t\t\tinputValue = valueBeforeCaret + e.clipboardData.getData(\"text/plain\") + valueAfterCaret;\n\t\t} else {\n\t\t\treturn true;\n\t\t} //allow native paste event as fallback ~ masking will continue by inputfallback\n\n\t\tvar pasteValue = inputValue;\n\t\tif (typeof opts.onBeforePaste === \"function\") {\n\t\t\tpasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts);\n\t\t\tif (pasteValue === false) {\n\t\t\t\treturn e.preventDefault();\n\t\t\t}\n\t\t\tif (!pasteValue) {\n\t\t\t\tpasteValue = inputValue;\n\t\t\t}\n\t\t}\n\t\tcheckVal(input, true, false, pasteValue.toString().split(\"\"), e);\n\n\t\treturn e.preventDefault();\n\t},\n\tinputFallBackEvent: function (e) { //fallback when keypress is not triggered\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts, $ = inputmask.dependencyLib;\n\n\t\tfunction ieMobileHandler(input, inputValue, caretPos) {\n\t\t\tif (iemobile) { //iemobile just sets the character at the end althought the caret position is correctly set\n\t\t\t\tvar inputChar = inputValue.replace(getBuffer.call(inputmask).join(\"\"), \"\");\n\t\t\t\tif (inputChar.length === 1) {\n\t\t\t\t\tvar iv = inputValue.split(\"\");\n\t\t\t\t\tiv.splice(caretPos.begin, 0, inputChar);\n\t\t\t\t\tinputValue = iv.join(\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn inputValue;\n\t\t}\n\n\t\tfunction analyseChanges(inputValue, buffer, caretPos) {\n\t\t\tvar frontPart = inputValue.substr(0, caretPos.begin).split(\"\"),\n\t\t\t\tbackPart = inputValue.substr(caretPos.begin).split(\"\"),\n\t\t\t\tfrontBufferPart = buffer.substr(0, caretPos.begin).split(\"\"),\n\t\t\t\tbackBufferPart = buffer.substr(caretPos.begin).split(\"\");\n\n\t\t\tvar fpl = frontPart.length >= frontBufferPart.length ? frontPart.length : frontBufferPart.length,\n\t\t\t\tbpl = backPart.length >= backBufferPart.length ? backPart.length : backBufferPart.length,\n\t\t\t\tbl, i, action = \"\", data = [], marker = \"~\", placeholder;\n\n\t\t\t//align buffers\n\t\t\twhile (frontPart.length < fpl) frontPart.push(marker);\n\t\t\twhile (frontBufferPart.length < fpl) frontBufferPart.push(marker);\n\t\t\twhile (backPart.length < bpl) backPart.unshift(marker);\n\t\t\twhile (backBufferPart.length < bpl) backBufferPart.unshift(marker);\n\n\t\t\tvar newBuffer = frontPart.concat(backPart);\n\t\t\tvar oldBuffer = frontBufferPart.concat(backBufferPart);\n\n\t\t\t// console.log(\"N \" + newBuffer);\n\t\t\t// console.log(\"O \" + oldBuffer);\n\n\t\t\tfor (i = 0, bl = newBuffer.length; i < bl; i++) {\n\t\t\t\tplaceholder = getPlaceholder.call(inputmask, translatePosition.call(inputmask, i));\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase \"insertText\":\n\t\t\t\t\t\tif (oldBuffer[i - 1] === newBuffer[i] && caretPos.begin == newBuffer.length - 1) {\n\t\t\t\t\t\t\tdata.push(newBuffer[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti = bl;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"insertReplacementText\":\n\t\t\t\t\t\tif (newBuffer[i] === marker) { //extend selection\n\t\t\t\t\t\t\tcaretPos.end++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// breakout loop\n\t\t\t\t\t\t\ti = bl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"deleteContentBackward\":\n\t\t\t\t\t\tif (newBuffer[i] === marker) {\n\t\t\t\t\t\t\tcaretPos.end++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//breakout loop\n\t\t\t\t\t\t\ti = bl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (newBuffer[i] !== oldBuffer[i]) {\n\t\t\t\t\t\t\tif ((newBuffer[i + 1] === marker || newBuffer[i + 1] === placeholder || newBuffer[i + 1] === undefined) && ((oldBuffer[i] === placeholder && oldBuffer[i + 1] === marker) || oldBuffer[i] === marker)) {  //basic insert\n\t\t\t\t\t\t\t\taction = \"insertText\";\n\t\t\t\t\t\t\t\tdata.push(newBuffer[i]);\n\t\t\t\t\t\t\t\tcaretPos.begin--;\n\t\t\t\t\t\t\t\tcaretPos.end--;\n\t\t\t\t\t\t\t} else if (oldBuffer[i + 1] === marker && oldBuffer[i] === newBuffer[i + 1]) { //insert between\n\t\t\t\t\t\t\t\taction = \"insertText\";\n\t\t\t\t\t\t\t\tdata.push(newBuffer[i]);\n\t\t\t\t\t\t\t\tcaretPos.begin--;\n\t\t\t\t\t\t\t\tcaretPos.end--;\n\t\t\t\t\t\t\t} else if (newBuffer[i] !== placeholder && newBuffer[i] !== marker &&\n\t\t\t\t\t\t\t\t(newBuffer[i + 1] === marker || (oldBuffer[i] !== newBuffer[i] && oldBuffer[i + 1] === newBuffer[i + 1] /*single char replacement*/))) { //replace selection\n\t\t\t\t\t\t\t\taction = \"insertReplacementText\";\n\t\t\t\t\t\t\t\tdata.push(newBuffer[i]);\n\t\t\t\t\t\t\t\tcaretPos.begin--;\n\t\t\t\t\t\t\t} else if (newBuffer[i] === marker) {  //delete~backspace\n\t\t\t\t\t\t\t\taction = \"deleteContentBackward\";\n\t\t\t\t\t\t\t\tif (isMask.call(inputmask, translatePosition.call(inputmask, i), true) || oldBuffer[i] === opts.radixPoint) caretPos.end++;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ti = bl;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\taction: action,\n\t\t\t\tdata: data,\n\t\t\t\tcaret: caretPos\n\t\t\t};\n\t\t}\n\n\t\tvar input = this,\n\t\t\tinputValue = input.inputmask._valueGet(true),\n\t\t\tbuffer = (inputmask.isRTL ? getBuffer.call(inputmask).slice().reverse() : getBuffer.call(inputmask)).join(\"\"),\n\t\t\tcaretPos = caret.call(inputmask, input, undefined, undefined, true);\n\n\t\tif (buffer !== inputValue) {\n\t\t\t// inputValue = radixPointHandler(input, inputValue, caretPos);\n\t\t\tinputValue = ieMobileHandler(input, inputValue, caretPos);\n\n\t\t\tvar changes = analyseChanges(inputValue, buffer, caretPos);\n\n\t\t\t// console.log(JSON.stringify(changes));\n\t\t\tif ((input.inputmask.shadowRoot || input.ownerDocument).activeElement !== input) {\n\t\t\t\tinput.focus();\n\t\t\t}\n\t\t\twriteBuffer(input, getBuffer.call(inputmask));\n\t\t\tcaret.call(inputmask, input, caretPos.begin, caretPos.end, true);\n\t\t\tswitch (changes.action) {\n\t\t\t\tcase \"insertText\":\n\t\t\t\tcase \"insertReplacementText\":\n\t\t\t\t\tchanges.data.forEach(function (entry, ndx) {\n\t\t\t\t\t\tvar keypress = new $.Event(\"keypress\");\n\t\t\t\t\t\tkeypress.which = entry.charCodeAt(0);\n\t\t\t\t\t\tinputmask.ignorable = false; //make sure ignorable is ignored ;-)\n\t\t\t\t\t\tEventHandlers.keypressEvent.call(input, keypress);\n\t\t\t\t\t});\n\t\t\t\t\tsetTimeout(function () {  //#2195 trigger keyup to help some other plugins to track changes\n\t\t\t\t\t\tinputmask.$el.trigger(\"keyup\");\n\t\t\t\t\t}, 0);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"deleteContentBackward\":\n\t\t\t\t\tvar keydown = new $.Event(\"keydown\");\n\t\t\t\t\tkeydown.keyCode = keyCode.BACKSPACE;\n\t\t\t\t\tEventHandlers.keydownEvent.call(input, keydown);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tapplyInputValue(input, inputValue);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tcompositionendEvent: function (e) {\n\t\tconst inputmask = this.inputmask;\n\n\t\tinputmask.isComposing = false;\n\t\tinputmask.$el.trigger(\"input\");\n\t},\n\tsetValueEvent: function (e) {\n\t\tconst inputmask = this.inputmask;\n\t\tvar input = this,\n\t\t\tvalue = (e && e.detail) ? e.detail[0] : arguments[1];\n\n\t\tif (value === undefined) {\n\t\t\tvalue = input.inputmask._valueGet(true);\n\t\t}\n\n\t\tapplyInputValue(input, value);\n\n\t\tif ((e.detail && e.detail[1] !== undefined) || arguments[2] !== undefined) {\n\t\t\tcaret.call(inputmask, input, e.detail ? e.detail[1] : arguments[2]);\n\t\t}\n\t}\n\t,\n\tfocusEvent: function (e) {\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts;\n\t\tvar input = this,\n\t\t\tnptValue = input.inputmask._valueGet();\n\n\t\tif (opts.showMaskOnFocus) {\n\t\t\tif (nptValue !== getBuffer.call(inputmask).join(\"\")) {\n\t\t\t\twriteBuffer(input, getBuffer.call(inputmask), seekNext.call(inputmask, getLastValidPosition.call(inputmask)));\n\t\t\t} /*else if (mouseEnter === false) { //only executed on focus without mouseenter\n\t\t\t\t\tcaret(input, seekNext(getLastValidPosition()));\n\t\t\t\t}*/\n\t\t}\n\t\tif (opts.positionCaretOnTab === true && inputmask.mouseEnter === false && (!isComplete.call(inputmask, getBuffer.call(inputmask)) || getLastValidPosition.call(inputmask) === -1)) {\n\t\t\tEventHandlers.clickEvent.apply(input, [e, true]);\n\t\t}\n\t\tinputmask.undoValue = inputmask._valueGet(true);\n\t},\n\tinvalidEvent: function (e) {\n\t\tthis.inputmask.validationEvent = true;\n\t},\n\tmouseleaveEvent: function () {\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts;\n\n\t\tvar input = this;\n\t\tinputmask.mouseEnter = false;\n\t\tif (opts.clearMaskOnLostFocus && (input.inputmask.shadowRoot || input.ownerDocument).activeElement !== input) {\n\t\t\tHandleNativePlaceholder(input, inputmask.originalPlaceholder);\n\t\t}\n\t},\n\tclickEvent: function (e, tabbed) {\n\t\tconst inputmask = this.inputmask;\n\n\t\tvar input = this;\n\t\tif ((input.inputmask.shadowRoot || input.ownerDocument).activeElement === input) {\n\t\t\tvar newCaretPosition = determineNewCaretPosition.call(inputmask, caret.call(inputmask, input), tabbed);\n\t\t\tif (newCaretPosition !== undefined) {\n\t\t\t\tcaret.call(inputmask, input, newCaretPosition);\n\t\t\t}\n\t\t}\n\t},\n\tcutEvent: function (e) {\n\t\tconst inputmask = this.inputmask, maskset = inputmask.maskset;\n\n\t\tvar input = this,\n\t\t\tpos = caret.call(inputmask, input);\n\n\t\t//correct clipboardData\n\t\tvar clipboardData = window.clipboardData || e.clipboardData,\n\t\t\tclipData = inputmask.isRTL ? getBuffer.call(inputmask).slice(pos.end, pos.begin) : getBuffer.call(inputmask).slice(pos.begin, pos.end);\n\t\tclipboardData.setData(\"text\", inputmask.isRTL ? clipData.reverse().join(\"\") : clipData.join(\"\"));\n\t\tif (document.execCommand) document.execCommand(\"copy\"); // copy selected content to system clipbaord\n\n\t\thandleRemove.call(inputmask, input, keyCode.DELETE, pos);\n\t\twriteBuffer(input, getBuffer.call(inputmask), maskset.p, e, inputmask.undoValue !== inputmask._valueGet(true));\n\t}\n\t,\n\tblurEvent: function (e) {\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts, $ = inputmask.dependencyLib;\n\n\t\tvar $input = $(this),\n\t\t\tinput = this;\n\t\tif (input.inputmask) {\n\t\t\tHandleNativePlaceholder(input, inputmask.originalPlaceholder);\n\t\t\tvar nptValue = input.inputmask._valueGet(),\n\t\t\t\tbuffer = getBuffer.call(inputmask).slice();\n\n\t\t\tif (nptValue !== \"\") {\n\t\t\t\tif (opts.clearMaskOnLostFocus) {\n\t\t\t\t\tif (getLastValidPosition.call(inputmask) === -1 && nptValue === getBufferTemplate.call(inputmask).join(\"\")) {\n\t\t\t\t\t\tbuffer = [];\n\t\t\t\t\t} else { //clearout optional tail of the mask\n\t\t\t\t\t\tclearOptionalTail.call(inputmask, buffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isComplete.call(inputmask, buffer) === false) {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t$input.trigger(\"incomplete\");\n\t\t\t\t\t}, 0);\n\t\t\t\t\tif (opts.clearIncomplete) {\n\t\t\t\t\t\tresetMaskSet.call(inputmask);\n\t\t\t\t\t\tif (opts.clearMaskOnLostFocus) {\n\t\t\t\t\t\t\tbuffer = [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbuffer = getBufferTemplate.call(inputmask).slice();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\twriteBuffer(input, buffer, undefined, e);\n\t\t\t}\n\n\t\t\tif (inputmask.undoValue !== inputmask._valueGet(true)) {\n\t\t\t\tinputmask.undoValue = inputmask._valueGet(true);\n\t\t\t\t$input.trigger(\"change\");\n\t\t\t}\n\t\t}\n\t}\n\t,\n\tmouseenterEvent: function () {\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts;\n\n\t\tvar input = this;\n\t\tinputmask.mouseEnter = true;\n\t\tif ((input.inputmask.shadowRoot || input.ownerDocument).activeElement !== input) {\n\t\t\tvar bufferTemplate = (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).join(\"\");\n\t\t\tif (inputmask.placeholder !== bufferTemplate && input.placeholder !== inputmask.originalPlaceholder) {\n\t\t\t\tinputmask.originalPlaceholder = input.placeholder;\n\t\t\t}\n\t\t\tif (opts.showMaskOnHover) {\n\t\t\t\tHandleNativePlaceholder(input, bufferTemplate);\n\t\t\t}\n\t\t}\n\t}\n\t,\n\tsubmitEvent: function () { //trigger change on submit if any\n\t\tconst inputmask = this.inputmask, opts = inputmask.opts;\n\n\t\tif (inputmask.undoValue !== inputmask._valueGet(true)) {\n\t\t\tinputmask.$el.trigger(\"change\");\n\t\t}\n\t\tif (opts.clearMaskOnLostFocus && getLastValidPosition.call(inputmask) === -1 && inputmask._valueGet && inputmask._valueGet() === getBufferTemplate.call(inputmask).join(\"\")) {\n\t\t\tinputmask._valueSet(\"\"); //clear masktemplete on submit and still has focus\n\t\t}\n\t\tif (opts.clearIncomplete && isComplete.call(inputmask, getBuffer.call(inputmask)) === false) {\n\t\t\tinputmask._valueSet(\"\");\n\t\t}\n\t\tif (opts.removeMaskOnSubmit) {\n\t\t\tinputmask._valueSet(inputmask.unmaskedvalue(), true);\n\t\t\tsetTimeout(function () {\n\t\t\t\twriteBuffer(inputmask.el, getBuffer.call(inputmask));\n\t\t\t}, 0);\n\t\t}\n\t},\n\tresetEvent: function () {\n\t\tconst inputmask = this.inputmask;\n\n\t\tinputmask.refreshValue = true; //indicate a forced refresh when there is a call to the value before leaving the triggering event fn\n\t\tsetTimeout(function () {\n\t\t\tapplyInputValue(inputmask.el, inputmask._valueGet(true));\n\t\t}, 0);\n\t}\n};\n","import Inputmask from \"./inputmask\";\nimport keyCode from \"./keycode.json\";\nimport {getBufferTemplate} from \"./positioning\";\nimport {HandleNativePlaceholder} from \"./inputHandling\";\n\nexport {EventRuler};\n\nvar EventRuler = {\n\ton: function (input, eventName, eventHandler) {\n\t\tconst $ = input.inputmask.dependencyLib;\n\n\t\tvar ev = function (e) {\n\t\t\tif (e.originalEvent) {\n\t\t\t\te = e.originalEvent || e; //get original event from jquery evenbt\n\t\t\t\targuments[0] = e;\n\t\t\t}\n\t\t\t// console.log(e.type);\n\t\t\tvar that = this, args, inputmask = that.inputmask, opts = inputmask ? inputmask.opts : undefined;\n\t\t\tif (inputmask === undefined && this.nodeName !== \"FORM\") { //happens when cloning an object with jquery.clone\n\t\t\t\tvar imOpts = $.data(that, \"_inputmask_opts\");\n\t\t\t\t$(that).off(); //unbind all events\n\t\t\t\tif (imOpts) {\n\t\t\t\t\t(new Inputmask(imOpts)).mask(that);\n\t\t\t\t}\n\t\t\t} else if (![\"submit\", \"reset\", \"setvalue\"].includes(e.type) && this.nodeName !== \"FORM\" && (that.disabled || (that.readOnly && !(e.type === \"keydown\" && (e.ctrlKey && e.keyCode === 67) || (opts.tabThrough === false && e.keyCode === keyCode.TAB))))) {\n\t\t\t\te.preventDefault();\n\t\t\t} else {\n\t\t\t\tswitch (e.type) {\n\t\t\t\t\tcase \"input\":\n\t\t\t\t\t\tif (inputmask.skipInputEvent === true || (e.inputType && e.inputType === \"insertCompositionText\")) {\n\t\t\t\t\t\t\tinputmask.skipInputEvent = false;\n\t\t\t\t\t\t\treturn e.preventDefault();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (mobile) { //this causes problem see #2220\n\t\t\t\t\t\t// \targs = arguments;\n\t\t\t\t\t\t// \tsetTimeout(function () { //needed for caret selection when entering a char on Android 8 - #1818\n\t\t\t\t\t\t// \t\teventHandler.apply(that, args);\n\t\t\t\t\t\t// \t\tcaret(that, that.inputmask.caretPos, undefined, true);\n\t\t\t\t\t\t// \t}, 0);\n\t\t\t\t\t\t// \treturn false;\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"keydown\":\n\t\t\t\t\t\t//Safari 5.1.x - modal dialog fires keypress twice workaround\n\t\t\t\t\t\tinputmask.skipKeyPressEvent = false;\n\t\t\t\t\t\tinputmask.skipInputEvent = inputmask.isComposing = e.keyCode === keyCode.KEY_229;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"keyup\":\n\t\t\t\t\tcase \"compositionend\":\n\t\t\t\t\t\tif (inputmask.isComposing) {\n\t\t\t\t\t\t\tinputmask.skipInputEvent = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"keypress\":\n\t\t\t\t\t\tif (inputmask.skipKeyPressEvent === true) {\n\t\t\t\t\t\t\treturn e.preventDefault();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinputmask.skipKeyPressEvent = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"click\":\n\t\t\t\t\tcase \"focus\":\n\t\t\t\t\t\tif (inputmask.validationEvent) { // #841\n\t\t\t\t\t\t\tinputmask.validationEvent = false;\n\t\t\t\t\t\t\tinput.blur();\n\t\t\t\t\t\t\tHandleNativePlaceholder(input, (inputmask.isRTL ? getBufferTemplate.call(inputmask).slice().reverse() : getBufferTemplate.call(inputmask)).join(\"\"));\n\t\t\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\t\t\tinput.focus();\n\t\t\t\t\t\t\t}, opts.validationEventTimeOut);\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\targs = arguments;\n\t\t\t\t\t\tsetTimeout(function () { //needed for Chrome ~ initial selection clears after the clickevent\n\t\t\t\t\t\t\tif (!input.inputmask) {\n\t\t\t\t\t\t\t\t// `inputmask.remove()` was called before this callback\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\teventHandler.apply(that, args);\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tvar returnVal = eventHandler.apply(that, arguments);\n\t\t\t\tif (returnVal === false) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\treturn returnVal;\n\t\t\t}\n\t\t};\n\t\tif ([\"submit\", \"reset\"].includes(eventName)) {\n\t\t\tev = ev.bind(input); //bind creates a new eventhandler (wrap)\n\t\t\tif (input.form !== null) $(input.form).on(eventName, ev);\n\t\t} else {\n\t\t\t$(input).on(eventName, ev);\n\t\t}\n\n\t\t//keep instance of the event\n\t\tinput.inputmask.events[eventName] = input.inputmask.events[eventName] || [];\n\t\tinput.inputmask.events[eventName].push(ev);\n\n\t},\n\toff: function (input, event) {\n\t\tif (input.inputmask && input.inputmask.events) {\n\t\t\tconst $ = input.inputmask.dependencyLib;\n\t\t\tlet events = input.inputmask.events;\n\t\t\tif (event) {\n\t\t\t\tevents = [];\n\t\t\t\tevents[event] = input.inputmask.events[event];\n\t\t\t}\n\t\t\tfor (let eventName in events) {\n\t\t\t\tlet evArr = events[eventName];\n\t\t\t\twhile (evArr.length > 0) {\n\t\t\t\t\tlet ev = evArr.pop();\n\t\t\t\t\tif ([\"submit\", \"reset\",].includes(eventName)) {\n\t\t\t\t\t\tif (input.form !== null) $(input.form).off(eventName, ev);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$(input).off(eventName, ev);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdelete input.inputmask.events[eventName];\n\t\t\t}\n\t\t}\n\t}\n};","import canUseDOM from \"../canUseDOM\";\n\nexport default canUseDOM ? window : {};\n","import keyCode from \"./keycode.json\";\nimport {getMaskTemplate, getPlaceholder, getTest} from \"./validation-tests\";\nimport {\n\tcaret,\n\tdetermineNewCaretPosition,\n\tgetBuffer, getBufferTemplate,\n\tgetLastValidPosition,\n\tisMask,\n\tresetMaskSet,\n\tseekNext\n} from \"./positioning\";\nimport {isComplete, isValid, refreshFromBuffer} from \"./validation\";\nimport {ie} from \"./environment\";\nimport {EventHandlers} from \"./eventhandlers\";\n\n\nexport {applyInputValue, clearOptionalTail, checkVal, HandleNativePlaceholder, unmaskedvalue, writeBuffer};\n\nfunction applyInputValue(input, value) {\n\tconst inputmask = input ? input.inputmask : this, opts = inputmask.opts;\n\n\tinput.inputmask.refreshValue = false;\n\tif (typeof opts.onBeforeMask === \"function\") value = opts.onBeforeMask.call(inputmask, value, opts) || value;\n\tvalue = value.toString().split(\"\");\n\tcheckVal(input, true, false, value);\n\tinputmask.undoValue = inputmask._valueGet(true);\n\tif ((opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate.call(inputmask).join(\"\") && getLastValidPosition.call(inputmask) === -1) {\n\t\tinput.inputmask._valueSet(\"\");\n\t}\n}\n\n//todo put on prototype?\nfunction clearOptionalTail(buffer) {\n\tconst inputmask = this;\n\n\tbuffer.length = 0;\n\tvar template = getMaskTemplate.call(inputmask, true, 0, true, undefined, true), lmnt;\n\twhile ((lmnt = template.shift()) !== undefined) buffer.push(lmnt);\n\treturn buffer;\n}\n\nfunction checkVal(input, writeOut, strict, nptvl, initiatingEvent) {\n\tconst inputmask = input ? input.inputmask : this,\n\t\tmaskset = inputmask.maskset,\n\t\topts = inputmask.opts, $ = inputmask.dependencyLib;\n\n\tvar inputValue = nptvl.slice(),\n\t\tcharCodes = \"\",\n\t\tinitialNdx = -1,\n\t\tresult = undefined, skipOptionalPartCharacter = opts.skipOptionalPartCharacter;\n\topts.skipOptionalPartCharacter = \"\"; //see issue #2311\n\n\tfunction isTemplateMatch(ndx, charCodes) {\n\t\tvar targetTemplate = getMaskTemplate.call(inputmask, true, 0).slice(ndx, seekNext.call(inputmask, ndx, false, false)).join(\"\").replace(/'/g, \"\"),\n\t\t\tcharCodeNdx = targetTemplate.indexOf(charCodes);\n\t\t//strip spaces from targetTemplate\n\t\twhile (charCodeNdx > 0 && targetTemplate[charCodeNdx - 1] === \" \") charCodeNdx--;\n\n\t\tvar match = charCodeNdx === 0 && !isMask.call(inputmask, ndx)\n\t\t\t&& (getTest.call(inputmask, ndx).match.nativeDef === charCodes.charAt(0)\n\t\t\t\t|| (getTest.call(inputmask, ndx).match.static === true && getTest.call(inputmask, ndx).match.nativeDef === (\"'\" + charCodes.charAt(0)))\n\t\t\t\t|| (getTest.call(inputmask, ndx).match.nativeDef === \" \" && (getTest.call(inputmask, ndx + 1).match.nativeDef === charCodes.charAt(0)\n\t\t\t\t\t|| (getTest.call(inputmask, ndx + 1).match.static === true && getTest.call(inputmask, ndx + 1).match.nativeDef === (\"'\" + charCodes.charAt(0))))));\n\n\t\tif (!match && charCodeNdx > 0 && !isMask.call(inputmask, ndx, false, true)) {\n\t\t\tvar nextPos = seekNext.call(inputmask, ndx);\n\t\t\tif (inputmask.caretPos.begin < nextPos) {\n\t\t\t\tinputmask.caretPos = {begin: nextPos};\n\t\t\t}\n\t\t}\n\t\treturn match;\n\t}\n\n\tresetMaskSet.call(inputmask);\n\tmaskset.tests = {}; //reset tests ~ possible after alternating\n\tinitialNdx = opts.radixPoint ? determineNewCaretPosition.call(inputmask, {\n\t\tbegin: 0,\n\t\tend: 0\n\t}, false, opts.__financeInput === false ? \"radixFocus\" : undefined).begin : 0;\n\tmaskset.p = initialNdx;\n\tinputmask.caretPos = {begin: initialNdx};\n\n\tvar staticMatches = [], prevCaretPos = inputmask.caretPos;\n\tinputValue.forEach(function (charCode, ndx) {\n\t\tif (charCode !== undefined) { //inputfallback strips some elements out of the inputarray.  $.each logically presents them as undefined\n\t\t\t/*if (maskset.validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder.call(inputmask, ndx) && isMask.call(inputmask, ndx, true) &&\n\t\t\t\tisValid.call(inputmask, ndx, inputValue[ndx], true, undefined, true, true) === false) {\n\t\t\t\tinputmask.caretPos.begin++;\n\t\t\t} else*/\n\t\t\t{\n\t\t\t\tvar keypress = new $.Event(\"_checkval\");\n\t\t\t\tkeypress.which = charCode.toString().charCodeAt(0);\n\t\t\t\tcharCodes += charCode;\n\t\t\t\tvar lvp = getLastValidPosition.call(inputmask, undefined, true);\n\t\t\t\tif (!isTemplateMatch(initialNdx, charCodes)) {\n\t\t\t\t\tresult = EventHandlers.keypressEvent.call(inputmask, keypress, true, false, strict, inputmask.caretPos.begin);\n\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tinitialNdx = inputmask.caretPos.begin + 1;\n\t\t\t\t\t\tcharCodes = \"\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult = EventHandlers.keypressEvent.call(inputmask, keypress, true, false, strict, lvp + 1);\n\t\t\t\t}\n\t\t\t\tif (result) {\n\t\t\t\t\tif (result.pos !== undefined && maskset.validPositions[result.pos] && maskset.validPositions[result.pos].match.static === true && maskset.validPositions[result.pos].alternation === undefined) {\n\t\t\t\t\t\tstaticMatches.push(result.pos);\n\t\t\t\t\t\tif (!inputmask.isRTL) {\n\t\t\t\t\t\t\tresult.forwardPosition = result.pos + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twriteBuffer.call(inputmask, undefined, getBuffer.call(inputmask), result.forwardPosition, keypress, false);\n\t\t\t\t\tinputmask.caretPos = {begin: result.forwardPosition, end: result.forwardPosition};\n\t\t\t\t\tprevCaretPos = inputmask.caretPos;\n\t\t\t\t} else {\n\t\t\t\t\tif (maskset.validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder.call(inputmask, ndx) && isMask.call(inputmask, ndx, true)) {\n\t\t\t\t\t\tinputmask.caretPos.begin++;\n\t\t\t\t\t} else inputmask.caretPos = prevCaretPos; //restore the caret position from before the failed validation\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tif (staticMatches.length > 0) {\n\t\tvar sndx, validPos, nextValid = seekNext.call(inputmask, -1, undefined, false);\n\t\tif ((!isComplete.call(inputmask, getBuffer.call(inputmask)) && staticMatches.length <= nextValid)\n\t\t\t|| (isComplete.call(inputmask, getBuffer.call(inputmask)) && staticMatches.length > 0 && (staticMatches.length !== nextValid && staticMatches[0] === 0))) { //should check if is sequence starting from 0\n\t\t\tvar nextSndx = nextValid;\n\t\t\twhile ((sndx = staticMatches.shift()) !== undefined) {\n\t\t\t\tvar keypress = new $.Event(\"_checkval\");\n\t\t\t\tvalidPos = maskset.validPositions[sndx];\n\t\t\t\tvalidPos.generatedInput = true;\n\t\t\t\tkeypress.which = validPos.input.charCodeAt(0);\n\t\t\t\tresult = EventHandlers.keypressEvent.call(inputmask, keypress, true, false, strict, nextSndx);\n\t\t\t\tif (result && result.pos !== undefined && result.pos !== sndx && maskset.validPositions[result.pos] && maskset.validPositions[result.pos].match.static === true) {\n\t\t\t\t\tstaticMatches.push(result.pos);\n\t\t\t\t} else if (!result) break;\n\t\t\t\tnextSndx++;\n\t\t\t}\n\t\t} else { //mark al statics as generated\n\t\t\t// while ((sndx = staticMatches.pop())) {\n\t\t\t// \tvalidPos = maskset.validPositions[sndx];\n\t\t\t// \tif (validPos) {\n\t\t\t// \t\tvalidPos.generatedInput = true;\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t}\n\tif (writeOut) {\n\t\twriteBuffer.call(inputmask, input, getBuffer.call(inputmask), result ? result.forwardPosition : inputmask.caretPos.begin, initiatingEvent || new $.Event(\"checkval\"), initiatingEvent && initiatingEvent.type === \"input\" && inputmask.undoValue !== inputmask._valueGet(true));\n\t\t// for (var vndx in maskset.validPositions) {\n\t\t// \tif (maskset.validPositions[vndx].match.generated !== true) { //only remove non forced generated\n\t\t// \t\tdelete maskset.validPositions[vndx].generatedInput; //clear generated markings ~ consider initializing with a  value as fully typed\n\t\t// \t}\n\t\t// }\n\t}\n\topts.skipOptionalPartCharacter = skipOptionalPartCharacter;\n}\n\nfunction HandleNativePlaceholder(npt, value) {\n\tconst inputmask = npt ? npt.inputmask : this;\n\n\tif (ie) {\n\t\tif (npt.inputmask._valueGet() !== value && (npt.placeholder !== value || npt.placeholder === \"\")) {\n\t\t\tvar buffer = getBuffer.call(inputmask).slice(),\n\t\t\t\tnptValue = npt.inputmask._valueGet();\n\t\t\tif (nptValue !== value) {\n\t\t\t\tvar lvp = getLastValidPosition.call(inputmask);\n\t\t\t\tif (lvp === -1 && nptValue === getBufferTemplate.call(inputmask).join(\"\")) {\n\t\t\t\t\tbuffer = [];\n\t\t\t\t} else if (lvp !== -1) { //clearout optional tail of the mask\n\t\t\t\t\tclearOptionalTail.call(inputmask, buffer);\n\t\t\t\t}\n\t\t\t\twriteBuffer(npt, buffer);\n\t\t\t}\n\t\t}\n\t} else if (npt.placeholder !== value) {\n\t\tnpt.placeholder = value;\n\t\tif (npt.placeholder === \"\") npt.removeAttribute(\"placeholder\");\n\t}\n}\n\nfunction unmaskedvalue(input) {\n\tconst inputmask = input ? input.inputmask : this,\n\t\topts = inputmask.opts,\n\t\tmaskset = inputmask.maskset;\n\n\tif (input) {\n\t\tif (input.inputmask === undefined) {\n\t\t\treturn input.value;\n\t\t}\n\t\tif (input.inputmask && input.inputmask.refreshValue) { //forced refresh from the value form.reset\n\t\t\tapplyInputValue(input, input.inputmask._valueGet(true));\n\t\t}\n\t}\n\tvar umValue = [],\n\t\tvps = maskset.validPositions;\n\tfor (var pndx in vps) {\n\t\tif (vps[pndx] && vps[pndx].match && (vps[pndx].match.static != true || (Array.isArray(maskset.metadata) && vps[pndx].generatedInput !== true))) {\n\t\t\t//only include generated input with multiple masks (check on metadata)\n\t\t\tumValue.push(vps[pndx].input);\n\t\t}\n\t}\n\tvar unmaskedValue = umValue.length === 0 ? \"\" : (inputmask.isRTL ? umValue.reverse() : umValue).join(\"\");\n\tif (typeof opts.onUnMask === \"function\") {\n\t\tvar bufferValue = (inputmask.isRTL ? getBuffer.call(inputmask).slice().reverse() : getBuffer.call(inputmask)).join(\"\");\n\t\tunmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);\n\t}\n\treturn unmaskedValue;\n}\n\nfunction writeBuffer(input, buffer, caretPos, event, triggerEvents) {\n\tconst inputmask = input ? input.inputmask : this,\n\t\topts = inputmask.opts,\n\t\t$ = inputmask.dependencyLib;\n\n\tif (event && typeof opts.onBeforeWrite === \"function\") {\n\t\t//    buffer = buffer.slice(); //prevent uncontrolled manipulation of the internal buffer\n\t\tvar result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);\n\t\tif (result) {\n\t\t\tif (result.refreshFromBuffer) {\n\t\t\t\tvar refresh = result.refreshFromBuffer;\n\t\t\t\trefreshFromBuffer.call(inputmask, refresh === true ? refresh : refresh.start, refresh.end, result.buffer || buffer);\n\t\t\t\tbuffer = getBuffer.call(inputmask, true);\n\t\t\t}\n\t\t\tif (caretPos !== undefined) caretPos = result.caret !== undefined ? result.caret : caretPos;\n\t\t}\n\t}\n\tif (input !== undefined) {\n\t\tinput.inputmask._valueSet(buffer.join(\"\"));\n\t\tif (caretPos !== undefined && (event === undefined || event.type !== \"blur\")) {\n\t\t\t// console.log(caretPos);\n\t\t\tcaret.call(inputmask, input, caretPos, undefined, undefined, (event !== undefined && event.type === \"keydown\" && (event.keyCode === keyCode.DELETE || event.keyCode === keyCode.BACKSPACE)));\n\t\t}\n\t\tif (triggerEvents === true) {\n\t\t\tvar $input = $(input), nptVal = input.inputmask._valueGet();\n\t\t\tinput.inputmask.skipInputEvent = true;\n\t\t\t$input.trigger(\"input\");\n\t\t\tsetTimeout(function () { //timeout needed for IE\n\t\t\t\tif (nptVal === getBufferTemplate.call(inputmask).join(\"\")) {\n\t\t\t\t\t$input.trigger(\"cleared\");\n\t\t\t\t} else if (isComplete.call(inputmask, buffer) === true) {\n\t\t\t\t\t$input.trigger(\"complete\");\n\t\t\t\t}\n\t\t\t}, 0);\n\t\t}\n\t}\n}\n","/*\n * Input Mask Core\n * http://github.com/RobinHerbots/jquery.inputmask\n * Copyright (c) Robin Herbots\n * Licensed under the MIT license\n */\nimport \"./polyfills/Object.getPrototypeOf\";\nimport \"./polyfills/Array.includes\";\n\nimport {mask} from \"./mask\";\nimport $ from \"./dependencyLibs/inputmask.dependencyLib\";\nimport window from \"./global/window\";\nimport {generateMaskSet, analyseMask} from \"./mask-lexer\";\nimport {getMaskTemplate} from \"./validation-tests\";\nimport {determineLastRequiredPosition, getBuffer, getBufferTemplate, isMask} from \"./positioning\";\nimport {isComplete} from \"./validation\";\nimport {checkVal, unmaskedvalue} from \"./inputHandling\";\nimport {EventRuler} from \"./eventruler\";\nimport definitions from \"./definitions\";\nimport defaults from \"./defaults\";\nimport canUseDOM from \"./canUseDOM\";\n\nconst document = window.document, dataKey = \"_inputmask_opts\";\n\nfunction Inputmask(alias, options, internal) {\n\tif (!canUseDOM) {\n\t\treturn;\n\t}\n\t\n\t//allow instanciating without new\n\tif (!(this instanceof Inputmask)) {\n\t\treturn new Inputmask(alias, options, internal);\n\t}\n\n\tthis.dependencyLib = $;\n\tthis.el = undefined;\n\tthis.events = {};\n\tthis.maskset = undefined;\n\n\tif (internal !== true) {\n\t\t//init options\n\t\tif (Object.prototype.toString.call(alias) === \"[object Object]\") {\n\t\t\toptions = alias;\n\t\t} else {\n\t\t\toptions = options || {};\n\t\t\tif (alias) options.alias = alias;\n\t\t}\n\t\tthis.opts = $.extend(true, {}, this.defaults, options);\n\t\tthis.noMasksCache = options && options.definitions !== undefined;\n\t\tthis.userOptions = options || {}; //user passed options\n\t\tresolveAlias(this.opts.alias, options, this.opts);\n\t}\n\n\t//maskscope properties\n\tthis.refreshValue = false; //indicate a refresh from the inputvalue is needed (form.reset)\n\tthis.undoValue = undefined;\n\tthis.$el = undefined;\n\tthis.skipKeyPressEvent = false; //Safari 5.1.x - modal dialog fires keypress twice workaround\n\tthis.skipInputEvent = false; //skip when triggered from within inputmask\n\tthis.validationEvent = false;\n\tthis.ignorable = false;\n\tthis.maxLength;\n\tthis.mouseEnter = false;\n\tthis.originalPlaceholder = undefined; //needed for FF\n\tthis.isComposing = false; //keydowncode == 229  compositionevent fallback\n}\n\nInputmask.prototype = {\n\tdataAttribute: \"data-inputmask\", //data attribute prefix used for attribute binding\n\t//options default\n\tdefaults: defaults,\n\tdefinitions: definitions,\n\taliases: {}, //aliases definitions\n\tmasksCache: {},\n\tget isRTL() {\n\t\treturn this.opts.isRTL || this.opts.numericInput;\n\t},\n\tmask: function (elems) {\n\t\tvar that = this;\n\t\tif (typeof elems === \"string\") {\n\t\t\telems = document.getElementById(elems) || document.querySelectorAll(elems);\n\t\t}\n\t\telems = elems.nodeName ? [elems] : (Array.isArray(elems) ? elems : Array.from(elems));\n\t\telems.forEach(function (el, ndx) {\n\t\t\tvar scopedOpts = $.extend(true, {}, that.opts);\n\t\t\tif (importAttributeOptions(el, scopedOpts, $.extend(true, {}, that.userOptions), that.dataAttribute)) {\n\t\t\t\tvar maskset = generateMaskSet(scopedOpts, that.noMasksCache);\n\t\t\t\tif (maskset !== undefined) {\n\t\t\t\t\tif (el.inputmask !== undefined) {\n\t\t\t\t\t\tel.inputmask.opts.autoUnmask = true; //force autounmasking when remasking\n\t\t\t\t\t\tel.inputmask.remove();\n\t\t\t\t\t}\n\t\t\t\t\t//store inputmask instance on the input with element reference\n\t\t\t\t\tel.inputmask = new Inputmask(undefined, undefined, true);\n\t\t\t\t\tel.inputmask.opts = scopedOpts;\n\t\t\t\t\tel.inputmask.noMasksCache = that.noMasksCache;\n\t\t\t\t\tel.inputmask.userOptions = $.extend(true, {}, that.userOptions);\n\t\t\t\t\t// el.inputmask.isRTL = scopedOpts.isRTL || scopedOpts.numericInput;\n\t\t\t\t\tel.inputmask.el = el;\n\t\t\t\t\tel.inputmask.$el = $(el);\n\t\t\t\t\tel.inputmask.maskset = maskset;\n\n\t\t\t\t\t$.data(el, dataKey, that.userOptions);\n\t\t\t\t\tmask.call(el.inputmask);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn elems && elems[0] ? (elems[0].inputmask || this) : this;\n\t},\n\toption: function (options, noremask) { //set extra options || retrieve value of a current option\n\t\tif (typeof options === \"string\") {\n\t\t\treturn this.opts[options];\n\t\t} else if (typeof options === \"object\") {\n\t\t\t$.extend(this.userOptions, options); //user passed options\n\t\t\t//remask\n\t\t\tif (this.el && noremask !== true) {\n\t\t\t\tthis.mask(this.el);\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t},\n\tunmaskedvalue: function (value) {\n\t\tthis.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n\t\tif (this.el === undefined || value !== undefined) {\n\t\t\tvar valueBuffer = (typeof this.opts.onBeforeMask === \"function\" ? (this.opts.onBeforeMask.call(this, value, this.opts) || value) : value).split(\"\");\n\t\t\tcheckVal.call(this, undefined, false, false, valueBuffer);\n\t\t\tif (typeof this.opts.onBeforeWrite === \"function\") this.opts.onBeforeWrite.call(this, undefined, getBuffer.call(this), 0, this.opts);\n\t\t}\n\t\treturn unmaskedvalue.call(this, this.el);\n\t},\n\tremove: function () {\n\t\tif (this.el) {\n\t\t\t$.data(this.el, dataKey, null); //invalidate\n\t\t\t//writeout the value\n\t\t\tvar cv = this.opts.autoUnmask ? unmaskedvalue(this.el) : this._valueGet(this.opts.autoUnmask);\n\t\t\tif (cv !== getBufferTemplate.call(this).join(\"\")) this._valueSet(cv, this.opts.autoUnmask); else this._valueSet(\"\");\n\t\t\t//unbind all events\n\t\t\tEventRuler.off(this.el);\n\n\t\t\t//restore the value property\n\t\t\tvar valueProperty;\n\t\t\tif (Object.getOwnPropertyDescriptor && Object.getPrototypeOf) {\n\t\t\t\tvalueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.el), \"value\");\n\t\t\t\tif (valueProperty) {\n\t\t\t\t\tif (this.__valueGet) {\n\t\t\t\t\t\tObject.defineProperty(this.el, \"value\", {\n\t\t\t\t\t\t\tget: this.__valueGet,\n\t\t\t\t\t\t\tset: this.__valueSet,\n\t\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (document.__lookupGetter__ && this.el.__lookupGetter__(\"value\")) {\n\t\t\t\tif (this.__valueGet) {\n\t\t\t\t\tthis.el.__defineGetter__(\"value\", this.__valueGet);\n\t\t\t\t\tthis.el.__defineSetter__(\"value\", this.__valueSet);\n\t\t\t\t}\n\t\t\t}\n\t\t\t//clear data\n\t\t\tthis.el.inputmask = undefined;\n\t\t}\n\t\treturn this.el;\n\t},\n\tgetemptymask: function () { //return the default (empty) mask value, usefull for setting the default value in validation\n\t\tthis.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n\t\treturn getBufferTemplate.call(this).join(\"\");\n\t},\n\thasMaskedValue: function () { //check wheter the returned value is masked or not; currently only works reliable when using jquery.val fn to retrieve the value\n\t\treturn !this.opts.autoUnmask;\n\t},\n\tisComplete: function () {\n\t\tthis.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n\t\treturn isComplete.call(this, getBuffer.call(this));\n\t},\n\tgetmetadata: function () { //return mask metadata if exists\n\t\tthis.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n\t\tif (Array.isArray(this.maskset.metadata)) {\n\t\t\tvar maskTarget = getMaskTemplate.call(this, true, 0, false).join(\"\");\n\t\t\tthis.maskset.metadata.forEach(function (mtdt) {\n\t\t\t\tif (mtdt.mask === maskTarget) {\n\t\t\t\t\tmaskTarget = mtdt;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\treturn maskTarget;\n\t\t}\n\t\treturn this.maskset.metadata;\n\t},\n\tisValid: function (value) {\n\t\tthis.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n\t\tif (value) {\n\t\t\tvar valueBuffer = (typeof this.opts.onBeforeMask === \"function\" ? (this.opts.onBeforeMask.call(this, value, this.opts) || value) : value).split(\"\");\n\t\t\tcheckVal.call(this, undefined, true, false, valueBuffer);\n\t\t} else {\n\t\t\tvalue = this.isRTL ? getBuffer.call(this).slice().reverse().join(\"\") : getBuffer.call(this).join(\"\");\n\t\t}\n\t\tvar buffer = getBuffer.call(this);\n\t\tvar rl = determineLastRequiredPosition.call(this),\n\t\t\tlmib = buffer.length - 1;\n\t\tfor (; lmib > rl; lmib--) {\n\t\t\tif (isMask.call(this, lmib)) break;\n\t\t}\n\t\tbuffer.splice(rl, lmib + 1 - rl);\n\n\t\treturn isComplete.call(this, buffer) && value === (this.isRTL ? getBuffer.call(this).slice().reverse().join(\"\") : getBuffer.call(this).join(\"\"));\n\n\t},\n\tformat: function (value, metadata) {\n\t\tthis.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n\t\tlet valueBuffer = (typeof this.opts.onBeforeMask === \"function\" ? (this.opts.onBeforeMask.call(this, value, this.opts) || value) : value).split(\"\");\n\t\tcheckVal.call(this, undefined, true, false, valueBuffer);\n\t\tlet formattedValue = this.isRTL ? getBuffer.call(this).slice().reverse().join(\"\") : getBuffer.call(this).join(\"\");\n\t\treturn metadata ? {\n\t\t\tvalue: formattedValue,\n\t\t\tmetadata: this.getmetadata()\n\t\t} : formattedValue;\n\t},\n\tsetValue: function (value) {\n\t\tif (this.el) {\n\t\t\t$(this.el).trigger(\"setvalue\", [value]);\n\t\t}\n\t},\n\tanalyseMask: analyseMask\n};\n\nfunction resolveAlias(aliasStr, options, opts) {\n\tvar aliasDefinition = Inputmask.prototype.aliases[aliasStr];\n\tif (aliasDefinition) {\n\t\tif (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts); //alias is another alias\n\t\t$.extend(true, opts, aliasDefinition); //merge alias definition in the options\n\t\t$.extend(true, opts, options); //reapply extra given options\n\t\treturn true;\n\t} else //alias not found - try as mask\n\tif (opts.mask === null) {\n\t\topts.mask = aliasStr;\n\t}\n\n\treturn false;\n}\n\nfunction importAttributeOptions(npt, opts, userOptions, dataAttribute) {\n\tfunction importOption(option, optionData) {\n\t\tconst attrOption = dataAttribute === \"\" ? option : dataAttribute + \"-\" + option;\n\t\toptionData = optionData !== undefined ? optionData : npt.getAttribute(attrOption);\n\t\tif (optionData !== null) {\n\t\t\tif (typeof optionData === \"string\") {\n\t\t\t\tif (option.indexOf(\"on\") === 0) {\n\t\t\t\t\toptionData = window[optionData];\n\t\t\t\t}//get function definition\n\t\t\t\telse if (optionData === \"false\") {\n\t\t\t\t\toptionData = false;\n\t\t\t\t} else if (optionData === \"true\") optionData = true;\n\t\t\t}\n\t\t\tuserOptions[option] = optionData;\n\t\t}\n\t}\n\n\tif (opts.importDataAttributes === true) {\n\t\tvar attrOptions = npt.getAttribute(dataAttribute), option, dataoptions, optionData, p;\n\n\t\tif (attrOptions && attrOptions !== \"\") {\n\t\t\tattrOptions = attrOptions.replace(/'/g, \"\\\"\");\n\t\t\tdataoptions = JSON.parse(\"{\" + attrOptions + \"}\");\n\t\t}\n\n\t\t//resolve aliases\n\t\tif (dataoptions) { //pickup alias from dataAttribute\n\t\t\toptionData = undefined;\n\t\t\tfor (p in dataoptions) {\n\t\t\t\tif (p.toLowerCase() === \"alias\") {\n\t\t\t\t\toptionData = dataoptions[p];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\timportOption(\"alias\", optionData); //pickup alias from dataAttribute-alias\n\t\tif (userOptions.alias) {\n\t\t\tresolveAlias(userOptions.alias, userOptions, opts);\n\t\t}\n\n\t\tfor (option in opts) {\n\t\t\tif (dataoptions) {\n\t\t\t\toptionData = undefined;\n\t\t\t\tfor (p in dataoptions) {\n\t\t\t\t\tif (p.toLowerCase() === option.toLowerCase()) {\n\t\t\t\t\t\toptionData = dataoptions[p];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\timportOption(option, optionData);\n\t\t}\n\t}\n\t$.extend(true, opts, userOptions);\n\n\t//handle dir=rtl\n\tif (npt.dir === \"rtl\" || opts.rightAlign) {\n\t\tnpt.style.textAlign = \"right\";\n\t}\n\n\tif (npt.dir === \"rtl\" || opts.numericInput) {\n\t\tnpt.dir = \"ltr\";\n\t\tnpt.removeAttribute(\"dir\");\n\t\topts.isRTL = true;\n\t}\n\n\treturn Object.keys(userOptions).length;\n}\n\n//apply defaults, definitions, aliases\nInputmask.extendDefaults = function (options) {\n\t$.extend(true, Inputmask.prototype.defaults, options);\n};\nInputmask.extendDefinitions = function (definition) {\n\t$.extend(true, Inputmask.prototype.definitions, definition);\n};\nInputmask.extendAliases = function (alias) {\n\t$.extend(true, Inputmask.prototype.aliases, alias);\n};\n//static fn on inputmask\nInputmask.format = function (value, options, metadata) {\n\treturn Inputmask(options).format(value, metadata);\n};\nInputmask.unmask = function (value, options) {\n\treturn Inputmask(options).unmaskedvalue(value);\n};\nInputmask.isValid = function (value, options) {\n\treturn Inputmask(options).isValid(value);\n};\nInputmask.remove = function (elems) {\n\tif (typeof elems === \"string\") {\n\t\telems = document.getElementById(elems) || document.querySelectorAll(elems);\n\t}\n\telems = elems.nodeName ? [elems] : elems;\n\telems.forEach(function (el) {\n\t\tif (el.inputmask) el.inputmask.remove();\n\t});\n};\nInputmask.setValue = function (elems, value) {\n\tif (typeof elems === \"string\") {\n\t\telems = document.getElementById(elems) || document.querySelectorAll(elems);\n\t}\n\telems = elems.nodeName ? [elems] : elems;\n\telems.forEach(function (el) {\n\t\tif (el.inputmask) el.inputmask.setValue(value); else $(el).trigger(\"setvalue\", [value]);\n\t});\n};\n\nInputmask.dependencyLib = $;\n\n//make inputmask available\nwindow.Inputmask = Inputmask;\nexport default Inputmask;\n","import $ from \"./dependencyLibs/inputmask.dependencyLib\";\nimport MaskToken from \"./masktoken\";\n\nexport {generateMaskSet, analyseMask};\n\nfunction generateMaskSet(opts, nocache) {\n\tvar ms;\n\n\tfunction generateMask(mask, metadata, opts) {\n\t\tvar regexMask = false;\n\t\tif (mask === null || mask === \"\") {\n\t\t\tregexMask = opts.regex !== null;\n\t\t\tif (regexMask) {\n\t\t\t\tmask = opts.regex;\n\t\t\t\tmask = mask.replace(/^(\\^)(.*)(\\$)$/, \"$2\");\n\t\t\t} else {\n\t\t\t\tregexMask = true;\n\t\t\t\tmask = \".*\";\n\t\t\t}\n\t\t}\n\t\tif (mask.length === 1 && opts.greedy === false && opts.repeat !== 0) {\n\t\t\topts.placeholder = \"\";\n\t\t} //hide placeholder with single non-greedy mask\n\t\tif (opts.repeat > 0 || opts.repeat === \"*\" || opts.repeat === \"+\") {\n\t\t\tvar repeatStart = opts.repeat === \"*\" ? 0 : (opts.repeat === \"+\" ? 1 : opts.repeat);\n\t\t\tmask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + \",\" + opts.repeat + opts.quantifiermarker[1];\n\t\t}\n\n\t\t// console.log(mask);\n\t\tvar masksetDefinition, maskdefKey;\n\t\tmaskdefKey = regexMask ? \"regex_\" + opts.regex : opts.numericInput ? mask.split(\"\").reverse().join(\"\") : mask;\n\t\tif (opts.keepStatic !== false) { //keepstatic modifies the output from the testdefinitions ~ so differentiate in the maskcache\n\t\t\tmaskdefKey = \"ks_\" + maskdefKey;\n\t\t}\n\n\t\tif (Inputmask.prototype.masksCache[maskdefKey] === undefined || nocache === true) {\n\t\t\tmasksetDefinition = {\n\t\t\t\t\"mask\": mask,\n\t\t\t\t\"maskToken\": Inputmask.prototype.analyseMask(mask, regexMask, opts),\n\t\t\t\t\"validPositions\": {},\n\t\t\t\t\"_buffer\": undefined,\n\t\t\t\t\"buffer\": undefined,\n\t\t\t\t\"tests\": {},\n\t\t\t\t\"excludes\": {}, //excluded alternations\n\t\t\t\t\"metadata\": metadata,\n\t\t\t\t\"maskLength\": undefined,\n\t\t\t\t\"jitOffset\": {}\n\t\t\t};\n\t\t\tif (nocache !== true) {\n\t\t\t\tInputmask.prototype.masksCache[maskdefKey] = masksetDefinition;\n\t\t\t\tmasksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);\n\t\t\t}\n\t\t} else {\n\t\t\tmasksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);\n\t\t}\n\n\t\treturn masksetDefinition;\n\t}\n\n\tif (typeof opts.mask === \"function\") { //allow mask to be a preprocessing fn - should return a valid mask\n\t\topts.mask = opts.mask(opts);\n\t}\n\tif (Array.isArray(opts.mask)) {\n\t\tif (opts.mask.length > 1) {\n\t\t\tif (opts.keepStatic === null) { //enable by default when passing multiple masks when the option is not explicitly specified\n\t\t\t\topts.keepStatic = true;\n\t\t\t}\n\t\t\tvar altMask = opts.groupmarker[0];\n\t\t\t(opts.isRTL ? opts.mask.reverse() : opts.mask).forEach(function (msk) {\n\t\t\t\tif (altMask.length > 1) {\n\t\t\t\t\taltMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0];\n\t\t\t\t}\n\t\t\t\tif (msk.mask !== undefined && typeof msk.mask !== \"function\") {\n\t\t\t\t\taltMask += msk.mask;\n\t\t\t\t} else {\n\t\t\t\t\taltMask += msk;\n\t\t\t\t}\n\t\t\t});\n\t\t\taltMask += opts.groupmarker[1];\n\t\t\t// console.log(altMask);\n\t\t\treturn generateMask(altMask, opts.mask, opts);\n\t\t} else {\n\t\t\topts.mask = opts.mask.pop();\n\t\t}\n\t}\n\tif (opts.keepStatic === null) opts.keepStatic = false;\n\tif (opts.mask && opts.mask.mask !== undefined && typeof opts.mask.mask !== \"function\") {\n\t\tms = generateMask(opts.mask.mask, opts.mask, opts);\n\t} else {\n\t\tms = generateMask(opts.mask, opts.mask, opts);\n\t}\n\n\treturn ms;\n}\n\nfunction analyseMask(mask, regexMask, opts) {\n\tconst tokenizer = /(?:[?*+]|\\{[0-9+*]+(?:,[0-9+*]*)?(?:\\|[0-9+*]*)?\\})|[^.?*+^${[]()|\\\\]+|./g,\n\t\t//Thx to https://github.com/slevithan/regex-colorizer for the regexTokenizer regex\n\t\tregexTokenizer = /\\[\\^?]?(?:[^\\\\\\]]+|\\\\[\\S\\s]?)*]?|\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\\S\\s]?)|\\((?:\\?[:=!]?)?|(?:[?*+]|\\{[0-9]+(?:,[0-9]*)?\\})\\??|[^.?*+^${[()|\\\\]+|./g;\n\tvar escaped = false,\n\t\tcurrentToken = new MaskToken(),\n\t\tmatch,\n\t\tm,\n\t\topenenings = [],\n\t\tmaskTokens = [],\n\t\topeningToken,\n\t\tcurrentOpeningToken,\n\t\talternator,\n\t\tlastMatch,\n\t\tcloseRegexGroup = false;\n\n\t//test definition => {fn: RegExp/function, static: true/false optionality: bool, newBlockMarker: bool, casing: null/upper/lower, def: definitionSymbol, placeholder: placeholder, mask: real maskDefinition}\n\tfunction insertTestDefinition(mtoken, element, position) {\n\t\tposition = position !== undefined ? position : mtoken.matches.length;\n\t\tvar prevMatch = mtoken.matches[position - 1];\n\t\tif (regexMask) {\n\t\t\tif (element.indexOf(\"[\") === 0 || (escaped && /\\\\d|\\\\s|\\\\w]/i.test(element)) || element === \".\") {\n\t\t\t\tmtoken.matches.splice(position++, 0, {\n\t\t\t\t\tfn: new RegExp(element, opts.casing ? \"i\" : \"\"),\n\t\t\t\t\tstatic: false,\n\t\t\t\t\toptionality: false,\n\t\t\t\t\tnewBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== element,\n\t\t\t\t\tcasing: null,\n\t\t\t\t\tdef: element,\n\t\t\t\t\tplaceholder: undefined,\n\t\t\t\t\tnativeDef: element\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (escaped) element = element[element.length - 1];\n\t\t\t\telement.split(\"\").forEach(function (lmnt, ndx) {\n\t\t\t\t\tprevMatch = mtoken.matches[position - 1];\n\t\t\t\t\tmtoken.matches.splice(position++, 0, {\n\t\t\t\t\t\tfn: /[a-z]/i.test((opts.staticDefinitionSymbol || lmnt)) ? new RegExp(\"[\" + (opts.staticDefinitionSymbol || lmnt) + \"]\", opts.casing ? \"i\" : \"\") : null,\n\t\t\t\t\t\tstatic: true,\n\t\t\t\t\t\toptionality: false,\n\t\t\t\t\t\tnewBlockMarker: prevMatch === undefined ? \"master\" : (prevMatch.def !== lmnt && prevMatch.static !== true),\n\t\t\t\t\t\tcasing: null,\n\t\t\t\t\t\tdef: opts.staticDefinitionSymbol || lmnt,\n\t\t\t\t\t\tplaceholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,\n\t\t\t\t\t\tnativeDef: (escaped ? \"'\" : \"\") + lmnt\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t\tescaped = false;\n\t\t} else {\n\t\t\tvar maskdef = (opts.definitions && opts.definitions[element]) || (opts.usePrototypeDefinitions && Inputmask.prototype.definitions[element]);\n\t\t\tif (maskdef && !escaped) {\n\t\t\t\tmtoken.matches.splice(position++, 0, {\n\t\t\t\t\tfn: maskdef.validator ? typeof maskdef.validator == \"string\" ? new RegExp(maskdef.validator, opts.casing ? \"i\" : \"\") : new function () {\n\t\t\t\t\t\tthis.test = maskdef.validator;\n\t\t\t\t\t} : new RegExp(\".\"),\n\t\t\t\t\tstatic: maskdef.static || false,\n\t\t\t\t\toptionality: false,\n\t\t\t\t\tnewBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== (maskdef.definitionSymbol || element),\n\t\t\t\t\tcasing: maskdef.casing,\n\t\t\t\t\tdef: maskdef.definitionSymbol || element,\n\t\t\t\t\tplaceholder: maskdef.placeholder,\n\t\t\t\t\tnativeDef: element,\n\t\t\t\t\tgenerated: maskdef.generated\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tmtoken.matches.splice(position++, 0, {\n\t\t\t\t\tfn: /[a-z]/i.test((opts.staticDefinitionSymbol || element)) ? new RegExp(\"[\" + (opts.staticDefinitionSymbol || element) + \"]\", opts.casing ? \"i\" : \"\") : null,\n\t\t\t\t\tstatic: true,\n\t\t\t\t\toptionality: false,\n\t\t\t\t\tnewBlockMarker: prevMatch === undefined ? \"master\" : (prevMatch.def !== element && prevMatch.static !== true),\n\t\t\t\t\tcasing: null,\n\t\t\t\t\tdef: opts.staticDefinitionSymbol || element,\n\t\t\t\t\tplaceholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,\n\t\t\t\t\tnativeDef: (escaped ? \"'\" : \"\") + element\n\t\t\t\t});\n\t\t\t\tescaped = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction verifyGroupMarker(maskToken) {\n\t\tif (maskToken && maskToken.matches) {\n\t\t\tmaskToken.matches.forEach(function (token, ndx) {\n\t\t\t\tvar nextToken = maskToken.matches[ndx + 1];\n\t\t\t\tif ((nextToken === undefined || (nextToken.matches === undefined || nextToken.isQuantifier === false)) && token && token.isGroup) { //this is not a group but a normal mask => convert\n\t\t\t\t\ttoken.isGroup = false;\n\t\t\t\t\tif (!regexMask) {\n\t\t\t\t\t\tinsertTestDefinition(token, opts.groupmarker[0], 0);\n\t\t\t\t\t\tif (token.openGroup !== true) {\n\t\t\t\t\t\t\tinsertTestDefinition(token, opts.groupmarker[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tverifyGroupMarker(token);\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction defaultCase() {\n\t\tif (openenings.length > 0) {\n\t\t\tcurrentOpeningToken = openenings[openenings.length - 1];\n\t\t\tinsertTestDefinition(currentOpeningToken, m);\n\t\t\tif (currentOpeningToken.isAlternator) { //handle alternator a | b case\n\t\t\t\talternator = openenings.pop();\n\t\t\t\tfor (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n\t\t\t\t\tif (alternator.matches[mndx].isGroup) alternator.matches[mndx].isGroup = false; //don't mark alternate groups as group\n\t\t\t\t}\n\t\t\t\tif (openenings.length > 0) {\n\t\t\t\t\tcurrentOpeningToken = openenings[openenings.length - 1];\n\t\t\t\t\tcurrentOpeningToken.matches.push(alternator);\n\t\t\t\t} else {\n\t\t\t\t\tcurrentToken.matches.push(alternator);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tinsertTestDefinition(currentToken, m);\n\t\t}\n\t}\n\n\tfunction reverseTokens(maskToken) {\n\t\tfunction reverseStatic(st) {\n\t\t\tif (st === opts.optionalmarker[0]) {\n\t\t\t\tst = opts.optionalmarker[1];\n\t\t\t} else if (st === opts.optionalmarker[1]) {\n\t\t\t\tst = opts.optionalmarker[0];\n\t\t\t} else if (st === opts.groupmarker[0]) {\n\t\t\t\tst = opts.groupmarker[1];\n\t\t\t} else if (st === opts.groupmarker[1]) st = opts.groupmarker[0];\n\n\t\t\treturn st;\n\t\t}\n\n\t\tmaskToken.matches = maskToken.matches.reverse();\n\t\tfor (var match in maskToken.matches) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(maskToken.matches, match)) {\n\t\t\t\tvar intMatch = parseInt(match);\n\t\t\t\tif (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) { //reposition quantifier\n\t\t\t\t\tvar qt = maskToken.matches[match];\n\t\t\t\t\tmaskToken.matches.splice(match, 1);\n\t\t\t\t\tmaskToken.matches.splice(intMatch + 1, 0, qt);\n\t\t\t\t}\n\t\t\t\tif (maskToken.matches[match].matches !== undefined) {\n\t\t\t\t\tmaskToken.matches[match] = reverseTokens(maskToken.matches[match]);\n\t\t\t\t} else {\n\t\t\t\t\tmaskToken.matches[match] = reverseStatic(maskToken.matches[match]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn maskToken;\n\t}\n\n\tfunction groupify(matches) {\n\t\tvar groupToken = new MaskToken(true);\n\t\tgroupToken.openGroup = false;\n\t\tgroupToken.matches = matches;\n\t\treturn groupToken;\n\t}\n\n\tfunction closeGroup() {\n\t\t// Group closing\n\t\topeningToken = openenings.pop();\n\t\topeningToken.openGroup = false; //mark group as complete\n\t\tif (openingToken !== undefined) {\n\t\t\tif (openenings.length > 0) {\n\t\t\t\tcurrentOpeningToken = openenings[openenings.length - 1];\n\t\t\t\tcurrentOpeningToken.matches.push(openingToken);\n\t\t\t\tif (currentOpeningToken.isAlternator) { //handle alternator (a) | (b) case\n\t\t\t\t\talternator = openenings.pop();\n\t\t\t\t\tfor (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n\t\t\t\t\t\talternator.matches[mndx].isGroup = false; //don't mark alternate groups as group\n\t\t\t\t\t\talternator.matches[mndx].alternatorGroup = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (openenings.length > 0) {\n\t\t\t\t\t\tcurrentOpeningToken = openenings[openenings.length - 1];\n\t\t\t\t\t\tcurrentOpeningToken.matches.push(alternator);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcurrentToken.matches.push(alternator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurrentToken.matches.push(openingToken);\n\t\t\t}\n\t\t} else {\n\t\t\tdefaultCase();\n\t\t}\n\t}\n\n\tfunction groupQuantifier(matches) {\n\t\tvar lastMatch = matches.pop();\n\t\tif (lastMatch.isQuantifier) {\n\t\t\tlastMatch = groupify([matches.pop(), lastMatch]);\n\t\t}\n\t\treturn lastMatch;\n\t}\n\n\tif (regexMask) {\n\t\topts.optionalmarker[0] = undefined;\n\t\topts.optionalmarker[1] = undefined;\n\t}\n\twhile ((match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask))) {\n\t\tm = match[0];\n\n\t\tif (regexMask) {\n\t\t\tswitch (m.charAt(0)) {\n\t\t\t\t//Quantifier\n\t\t\t\tcase \"?\":\n\t\t\t\t\tm = \"{0,1}\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"+\":\n\t\t\t\tcase \"*\":\n\t\t\t\t\tm = \"{\" + m + \"}\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"|\":\n\t\t\t\t\t//regex mask alternator  ex: [01][0-9]|2[0-3] => ([01][0-9]|2[0-3])\n\t\t\t\t\tif (openenings.length === 0) { //wrap the mask in a group to form a regex alternator  ([01][0-9]|2[0-3])\n\t\t\t\t\t\tvar altRegexGroup = groupify(currentToken.matches);\n\t\t\t\t\t\taltRegexGroup.openGroup = true;\n\t\t\t\t\t\topenenings.push(altRegexGroup);\n\t\t\t\t\t\tcurrentToken.matches = [];\n\t\t\t\t\t\tcloseRegexGroup = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (escaped) {\n\t\t\tdefaultCase();\n\t\t\tcontinue;\n\t\t}\n\t\tswitch (m.charAt(0)) {\n\t\t\tcase \"$\":\n\t\t\tcase \"^\":\n\t\t\t\t//ignore beginswith and endswith as in masking this makes no point\n\t\t\t\tif (!regexMask) {\n\t\t\t\t\tdefaultCase();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"(?=\": //lookahead\n\t\t\t\topenenings.push(new MaskToken(true));\n\t\t\t\tbreak;\n\t\t\tcase \"(?!\": //negative lookahead\n\t\t\t\topenenings.push(new MaskToken(true));\n\t\t\t\tbreak;\n\t\t\tcase \"(?<=\": //lookbehind\n\t\t\t\topenenings.push(new MaskToken(true));\n\t\t\t\tbreak;\n\t\t\tcase \"(?<!\": //negative lookbehind\n\t\t\t\topenenings.push(new MaskToken(true));\n\t\t\t\tbreak;\n\t\t\tcase opts.escapeChar:\n\t\t\t\tescaped = true;\n\t\t\t\tif (regexMask) {\n\t\t\t\t\tdefaultCase();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// optional closing\n\t\t\tcase opts.optionalmarker[1]:\n\t\t\tcase opts.groupmarker[1]:\n\t\t\t\tcloseGroup();\n\t\t\t\tbreak;\n\t\t\tcase opts.optionalmarker[0]:\n\t\t\t\t// optional opening\n\t\t\t\topenenings.push(new MaskToken(false, true));\n\t\t\t\tbreak;\n\t\t\tcase opts.groupmarker[0]:\n\t\t\t\t// Group opening\n\t\t\t\topenenings.push(new MaskToken(true));\n\t\t\t\tbreak;\n\t\t\tcase opts.quantifiermarker[0]:\n\t\t\t\t//Quantifier\n\t\t\t\tvar quantifier = new MaskToken(false, false, true);\n\n\t\t\t\tm = m.replace(/[{}]/g, \"\");\n\t\t\t\tvar mqj = m.split(\"|\"),\n\t\t\t\t\tmq = mqj[0].split(\",\"),\n\t\t\t\t\tmq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),\n\t\t\t\t\tmq1 = mq.length === 1 ? mq0 : (isNaN(mq[1]) ? mq[1] : parseInt(mq[1])),\n\t\t\t\t\tmqJit = isNaN(mqj[1]) ? mqj[1] : parseInt(mqj[1]);\n\t\t\t\tif (mq0 === \"*\" || mq0 === \"+\") {\n\t\t\t\t\tmq0 = mq1 === \"*\" ? 0 : 1;\n\t\t\t\t}\n\t\t\t\tquantifier.quantifier = {\n\t\t\t\t\tmin: mq0,\n\t\t\t\t\tmax: mq1,\n\t\t\t\t\tjit: mqJit\n\t\t\t\t};\n\t\t\t\tvar matches = openenings.length > 0 ? openenings[openenings.length - 1].matches : currentToken.matches;\n\t\t\t\tmatch = matches.pop();\n\t\t\t\tif (match.isAlternator) { //handle quantifier in an alternation [0-9]{2}|[0-9]{3}\n\t\t\t\t\tmatches.push(match); //push back alternator\n\t\t\t\t\tmatches = match.matches; //remap target matches\n\t\t\t\t\tvar groupToken = new MaskToken(true);\n\t\t\t\t\tvar tmpMatch = matches.pop();\n\t\t\t\t\tmatches.push(groupToken); //push the group\n\t\t\t\t\tmatches = groupToken.matches;\n\t\t\t\t\tmatch = tmpMatch;\n\t\t\t\t}\n\t\t\t\tif (!match.isGroup) {\n\t\t\t\t\t// if (regexMask && match.fn === null) { //why is this needed???\n\t\t\t\t\t//     if (match.def === \".\") match.fn = new RegExp(match.def, opts.casing ? \"i\" : \"\");\n\t\t\t\t\t// }\n\n\t\t\t\t\tmatch = groupify([match]);\n\t\t\t\t}\n\t\t\t\tmatches.push(match);\n\t\t\t\tmatches.push(quantifier);\n\n\t\t\t\tbreak;\n\t\t\tcase opts.alternatormarker:\n\n\n\t\t\t\tif (openenings.length > 0) {\n\t\t\t\t\tcurrentOpeningToken = openenings[openenings.length - 1];\n\t\t\t\t\tvar subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];\n\t\t\t\t\tif (currentOpeningToken.openGroup && //regexp alt syntax\n\t\t\t\t\t\t(subToken.matches === undefined || (subToken.isGroup === false && subToken.isAlternator === false))) { //alternations within group\n\t\t\t\t\t\tlastMatch = openenings.pop();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlastMatch = groupQuantifier(currentOpeningToken.matches);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlastMatch = groupQuantifier(currentToken.matches);\n\t\t\t\t}\n\t\t\t\tif (lastMatch.isAlternator) {\n\t\t\t\t\topenenings.push(lastMatch);\n\t\t\t\t} else {\n\t\t\t\t\tif (lastMatch.alternatorGroup) {\n\t\t\t\t\t\talternator = openenings.pop();\n\t\t\t\t\t\tlastMatch.alternatorGroup = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\talternator = new MaskToken(false, false, false, true);\n\t\t\t\t\t}\n\t\t\t\t\talternator.matches.push(lastMatch);\n\t\t\t\t\topenenings.push(alternator);\n\t\t\t\t\tif (lastMatch.openGroup) { //regexp alt syntax\n\t\t\t\t\t\tlastMatch.openGroup = false;\n\t\t\t\t\t\tvar alternatorGroup = new MaskToken(true);\n\t\t\t\t\t\talternatorGroup.alternatorGroup = true;\n\t\t\t\t\t\topenenings.push(alternatorGroup);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tdefaultCase();\n\t\t}\n\t}\n\n\tif (closeRegexGroup) closeGroup();\n\n\twhile (openenings.length > 0) {\n\t\topeningToken = openenings.pop();\n\t\tcurrentToken.matches.push(openingToken);\n\t}\n\tif (currentToken.matches.length > 0) {\n\t\tverifyGroupMarker(currentToken);\n\t\tmaskTokens.push(currentToken);\n\t}\n\n\tif (opts.numericInput || opts.isRTL) {\n\t\treverseTokens(maskTokens[0]);\n\t}\n\t// console.log(JSON.stringify(maskTokens));\n\treturn maskTokens;\n}\n","import keyCode from \"./keycode.json\";\nimport {caret, getBuffer, getBufferTemplate, getLastValidPosition, resetMaskSet, seekNext} from \"./positioning\";\nimport {applyInputValue, clearOptionalTail, writeBuffer} from \"./inputHandling\";\nimport {EventRuler} from \"./eventruler\";\nimport {iphone, mobile} from \"./environment\";\nimport {isComplete} from \"./validation\";\nimport {EventHandlers} from \"./eventhandlers\";\n\nexport{mask};\n\n//todo put on the prototype?\nfunction mask() {\n\tconst inputmask = this,\n\t\topts= this.opts,\n\tel=this.el,$=this.dependencyLib;\n\n\n\tfunction isElementTypeSupported(input, opts) {\n\t\tfunction patchValueProperty(npt) {\n\t\t\tvar valueGet;\n\t\t\tvar valueSet;\n\n\t\t\tfunction patchValhook(type) {\n\t\t\t\tif ($.valHooks && ($.valHooks[type] === undefined || $.valHooks[type].inputmaskpatch !== true)) {\n\t\t\t\t\tvar valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function (elem) {\n\t\t\t\t\t\treturn elem.value;\n\t\t\t\t\t};\n\t\t\t\t\tvar valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function (elem, value) {\n\t\t\t\t\t\telem.value = value;\n\t\t\t\t\t\treturn elem;\n\t\t\t\t\t};\n\n\t\t\t\t\t$.valHooks[type] = {\n\t\t\t\t\t\tget: function (elem) {\n\t\t\t\t\t\t\tif (elem.inputmask) {\n\t\t\t\t\t\t\t\tif (elem.inputmask.opts.autoUnmask) {\n\t\t\t\t\t\t\t\t\treturn elem.inputmask.unmaskedvalue();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tvar result = valhookGet(elem);\n\t\t\t\t\t\t\t\t\treturn getLastValidPosition.call(inputmask, undefined, undefined, elem.inputmask.maskset.validPositions) !== -1 || opts.nullable !== true ? result : \"\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn valhookGet(elem);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tset: function (elem, value) {\n\t\t\t\t\t\t\tvar result = valhookSet(elem, value);\n\t\t\t\t\t\t\tif (elem.inputmask) {\n\t\t\t\t\t\t\t\tapplyInputValue(elem, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tinputmaskpatch: true\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction getter() {\n\t\t\t\tif (this.inputmask) {\n\t\t\t\t\treturn this.inputmask.opts.autoUnmask ?\n\t\t\t\t\t\tthis.inputmask.unmaskedvalue() :\n\t\t\t\t\t\t(getLastValidPosition.call(inputmask) !== -1 || opts.nullable !== true ?\n\t\t\t\t\t\t\t(((this.inputmask.shadowRoot || this.ownerDocument).activeElement) === this && opts.clearMaskOnLostFocus ?\n\t\t\t\t\t\t\t\t(inputmask.isRTL ? clearOptionalTail.call(inputmask,getBuffer.call(inputmask).slice()).reverse() : clearOptionalTail.call(inputmask,getBuffer.call(inputmask).slice())).join(\"\") :\n\t\t\t\t\t\t\t\tvalueGet.call(this)) :\n\t\t\t\t\t\t\t\"\");\n\t\t\t\t} else {\n\t\t\t\t\treturn valueGet.call(this);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction setter(value) {\n\t\t\t\tvalueSet.call(this, value);\n\t\t\t\tif (this.inputmask) {\n\t\t\t\t\tapplyInputValue(this, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction installNativeValueSetFallback(npt) {\n\t\t\t\tEventRuler.on(npt, \"mouseenter\", function () {\n\t\t\t\t\tvar input = this,\n\t\t\t\t\t\tvalue = input.inputmask._valueGet(true);\n\t\t\t\t\tif (value !== (inputmask.isRTL ? getBuffer.call(inputmask).reverse() : getBuffer.call(inputmask)).join(\"\")) { //Is this correct? to apply RTL? TOCHECK\n\t\t\t\t\t\tapplyInputValue(input, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (!npt.inputmask.__valueGet) {\n\t\t\t\tif (opts.noValuePatching !== true) {\n\t\t\t\t\tif (Object.getOwnPropertyDescriptor) {\n\t\t\t\t\t\tvar valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), \"value\") : undefined;\n\t\t\t\t\t\tif (valueProperty && valueProperty.get && valueProperty.set) {\n\t\t\t\t\t\t\tvalueGet = valueProperty.get;\n\t\t\t\t\t\t\tvalueSet = valueProperty.set;\n\t\t\t\t\t\t\tObject.defineProperty(npt, \"value\", {\n\t\t\t\t\t\t\t\tget: getter,\n\t\t\t\t\t\t\t\tset: setter,\n\t\t\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (npt.tagName.toLowerCase() !== \"input\") {\n\t\t\t\t\t\t\tvalueGet = function () {\n\t\t\t\t\t\t\t\treturn this.textContent;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tvalueSet = function (value) {\n\t\t\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tObject.defineProperty(npt, \"value\", {\n\t\t\t\t\t\t\t\tget: getter,\n\t\t\t\t\t\t\t\tset: setter,\n\t\t\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (document.__lookupGetter__ && npt.__lookupGetter__(\"value\")) {\n\t\t\t\t\t\tvalueGet = npt.__lookupGetter__(\"value\");\n\t\t\t\t\t\tvalueSet = npt.__lookupSetter__(\"value\");\n\n\t\t\t\t\t\tnpt.__defineGetter__(\"value\", getter);\n\t\t\t\t\t\tnpt.__defineSetter__(\"value\", setter);\n\t\t\t\t\t}\n\t\t\t\t\tnpt.inputmask.__valueGet = valueGet; //store native property getter\n\t\t\t\t\tnpt.inputmask.__valueSet = valueSet; //store native property setter\n\t\t\t\t}\n\t\t\t\tnpt.inputmask._valueGet = function (overruleRTL) {\n\t\t\t\t\treturn inputmask.isRTL && overruleRTL !== true ? valueGet.call(this.el).split(\"\").reverse().join(\"\") : valueGet.call(this.el);\n\t\t\t\t};\n\t\t\t\tnpt.inputmask._valueSet = function (value, overruleRTL) { //null check is needed for IE8 => otherwise converts to \"null\"\n\t\t\t\t\tvalueSet.call(this.el, (value === null || value === undefined) ? \"\" : ((overruleRTL !== true && inputmask.isRTL) ? value.split(\"\").reverse().join(\"\") : value));\n\t\t\t\t};\n\n\t\t\t\tif (valueGet === undefined) { //jquery.val fallback\n\t\t\t\t\tvalueGet = function () {\n\t\t\t\t\t\treturn this.value;\n\t\t\t\t\t};\n\t\t\t\t\tvalueSet = function (value) {\n\t\t\t\t\t\tthis.value = value;\n\t\t\t\t\t};\n\t\t\t\t\tpatchValhook(npt.type);\n\t\t\t\t\tinstallNativeValueSetFallback(npt);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (input.tagName.toLowerCase() !== \"textarea\") {\n\t\t\topts.ignorables.push(keyCode.ENTER);\n\t\t}\n\n\t\tvar elementType = input.getAttribute(\"type\");\n\t\tvar isSupported = (input.tagName.toLowerCase() === \"input\" && opts.supportsInputType.includes(elementType)) || input.isContentEditable || input.tagName.toLowerCase() === \"textarea\";\n\t\tif (!isSupported) {\n\t\t\tif (input.tagName.toLowerCase() === \"input\") {\n\t\t\t\tvar el = document.createElement(\"input\");\n\t\t\t\tel.setAttribute(\"type\", elementType);\n\t\t\t\tisSupported = el.type === \"text\"; //apply mask only if the type is not natively supported\n\t\t\t\tel = null;\n\t\t\t} else {\n\t\t\t\tisSupported = \"partial\";\n\t\t\t}\n\t\t}\n\t\tif (isSupported !== false) {\n\t\t\tpatchValueProperty(input);\n\t\t} else {\n\t\t\tinput.inputmask = undefined;\n\t\t}\n\t\treturn isSupported;\n\t}\n\n\t//unbind all events - to make sure that no other mask will interfere when re-masking\n\tEventRuler.off(el);\n\tvar isSupported = isElementTypeSupported(el, opts);\n\tif (isSupported !== false) {\n\t\tinputmask.originalPlaceholder = el.placeholder;\n\n\t\t//read maxlength prop from el\n\t\tinputmask.maxLength = el !== undefined ? el.maxLength : undefined;\n\t\tif (inputmask.maxLength === -1) inputmask.maxLength = undefined;\n\t\tif (\"inputMode\" in el && el.getAttribute(\"inputmode\") === null) {\n\t\t\tel.inputMode = opts.inputmode;\n\t\t\tel.setAttribute(\"inputmode\", opts.inputmode);\n\t\t}\n\n\n\t\tif (isSupported === true) {\n\t\t\topts.showMaskOnFocus = opts.showMaskOnFocus && [\"cc-number\", \"cc-exp\"].indexOf(el.autocomplete) === -1;\n\t\t\tif (iphone) { //selecting the caret shows as a slection on iphone\n\t\t\t\topts.insertModeVisual = false;\n\t\t\t}\n\n\t\t\t//bind events\n\t\t\tEventRuler.on(el, \"submit\", EventHandlers.submitEvent);\n\t\t\tEventRuler.on(el, \"reset\", EventHandlers.resetEvent);\n\t\t\tEventRuler.on(el, \"blur\", EventHandlers.blurEvent);\n\t\t\tEventRuler.on(el, \"focus\", EventHandlers.focusEvent);\n\t\t\tEventRuler.on(el, \"invalid\", EventHandlers.invalidEvent);\n\t\t\tEventRuler.on(el, \"click\", EventHandlers.clickEvent);\n\t\t\tEventRuler.on(el, \"mouseleave\", EventHandlers.mouseleaveEvent);\n\t\t\tEventRuler.on(el, \"mouseenter\", EventHandlers.mouseenterEvent);\n\t\t\tEventRuler.on(el, \"paste\", EventHandlers.pasteEvent);\n\t\t\tEventRuler.on(el, \"cut\", EventHandlers.cutEvent);\n\t\t\tEventRuler.on(el, \"complete\", opts.oncomplete);\n\t\t\tEventRuler.on(el, \"incomplete\", opts.onincomplete);\n\t\t\tEventRuler.on(el, \"cleared\", opts.oncleared);\n\t\t\tif (opts.inputEventOnly !== true) {\n\t\t\t\tEventRuler.on(el, \"keydown\", EventHandlers.keydownEvent);\n\t\t\t\tEventRuler.on(el, \"keypress\", EventHandlers.keypressEvent);\n\t\t\t\tEventRuler.on(el, \"keyup\", EventHandlers.keyupEvent);\n\t\t\t}\n\t\t\tif (mobile || opts.inputEventOnly) {\n\t\t\t\tel.removeAttribute(\"maxLength\");\n\t\t\t}\n\t\t\tEventRuler.on(el, \"input\", EventHandlers.inputFallBackEvent);\n\t\t\tEventRuler.on(el, \"compositionend\", EventHandlers.compositionendEvent);\n\t\t\t// EventRuler.on(el, \"beforeinput\", EventHandlers.beforeInputEvent); //https://github.com/w3c/input-events - to implement\n\t\t}\n\t\tEventRuler.on(el, \"setvalue\", EventHandlers.setValueEvent);\n\n\t\t//apply mask\n\t\tgetBufferTemplate.call(inputmask).join(\"\"); //initialize the buffer and getmasklength\n\t\tinputmask.undoValue = inputmask._valueGet(true);\n\t\tvar activeElement = (el.inputmask.shadowRoot || el.ownerDocument).activeElement;\n\t\tif (el.inputmask._valueGet(true) !== \"\" || opts.clearMaskOnLostFocus === false || activeElement === el) {\n\t\t\tapplyInputValue(el, el.inputmask._valueGet(true), opts);\n\t\t\tvar buffer = getBuffer.call(inputmask).slice();\n\t\t\tif (isComplete.call(inputmask, buffer) === false) {\n\t\t\t\tif (opts.clearIncomplete) {\n\t\t\t\t\tresetMaskSet.call(inputmask);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (opts.clearMaskOnLostFocus && activeElement !== el) {\n\t\t\t\tif (getLastValidPosition.call(inputmask) === -1) {\n\t\t\t\t\tbuffer = [];\n\t\t\t\t} else {\n\t\t\t\t\tclearOptionalTail.call(inputmask, buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (opts.clearMaskOnLostFocus === false || (opts.showMaskOnFocus && activeElement === el) || el.inputmask._valueGet(true) !== \"\") {\n\t\t\t\twriteBuffer(el, buffer);\n\t\t\t}\n\t\t\tif (activeElement === el) { //position the caret when in focus\n\t\t\t\tcaret.call(inputmask,el, seekNext.call(inputmask, getLastValidPosition.call(inputmask)));\n\t\t\t}\n\t\t}\n\t}\n}","export default function (isGroup, isOptional, isQuantifier, isAlternator) {\n\tthis.matches = [];\n\tthis.openGroup = isGroup || false;\n\tthis.alternatorGroup = false;\n\tthis.isGroup = isGroup || false;\n\tthis.isOptional = isOptional || false;\n\tthis.isQuantifier = isQuantifier || false;\n\tthis.isAlternator = isAlternator || false;\n\tthis.quantifier = {\n\t\tmin: 1,\n\t\tmax: 1\n\t};\n}","// https://tc39.github.io/ecma262/#sec-array.prototype.includes\nif (!Array.prototype.includes) {\n\tObject.defineProperty(Array.prototype, \"includes\", {\n\t\tvalue: function(searchElement, fromIndex) {\n\n\t\t\t// 1. Let O be ? ToObject(this value).\n\t\t\tif (this == null) {\n\t\t\t\tthrow new TypeError(\"\\\"this\\\" is null or not defined\");\n\t\t\t}\n\n\t\t\tvar o = Object(this);\n\n\t\t\t// 2. Let len be ? ToLength(? Get(O, \"length\")).\n\t\t\tvar len = o.length >>> 0;\n\n\t\t\t// 3. If len is 0, return false.\n\t\t\tif (len === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// 4. Let n be ? ToInteger(fromIndex).\n\t\t\t//    (If fromIndex is undefined, this step produces the value 0.)\n\t\t\tvar n = fromIndex | 0;\n\n\t\t\t// 5. If n ≥ 0, then\n\t\t\t//  a. Let k be n.\n\t\t\t// 6. Else n < 0,\n\t\t\t//  a. Let k be len + n.\n\t\t\t//  b. If k < 0, let k be 0.\n\t\t\tvar k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n\t\t\t// 7. Repeat, while k < len\n\t\t\twhile (k < len) {\n\t\t\t\t// a. Let elementK be the result of ? Get(O, ! ToString(k)).\n\t\t\t\t// b. If SameValueZero(searchElement, elementK) is true, return true.\n\t\t\t\t// c. Increase k by 1.\n\t\t\t\t// NOTE: === provides the correct \"SameValueZero\" comparison needed here.\n\t\t\t\tif (o[k] === searchElement) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tk++;\n\t\t\t}\n\n\t\t\t// 8. Return false\n\t\t\treturn false;\n\t\t}\n\t});\n}","if (typeof Object.getPrototypeOf !== \"function\") {\n\tObject.getPrototypeOf = typeof \"test\".__proto__ === \"object\" ? function (object) {\n\t\treturn object.__proto__;\n\t} : function (object) {\n\t\treturn object.constructor.prototype;\n\t};\n}","import {\n\tdetermineTestTemplate,\n\tgetMaskTemplate,\n\tgetPlaceholder,\n\tgetTest,\n\tgetTests,\n\tgetTestTemplate\n} from \"./validation-tests\";\nimport {checkAlternationMatch} from \"./validation\";\n\nexport {\n\tcaret,\n\tdetermineLastRequiredPosition,\n\tdetermineNewCaretPosition,\n\tgetBuffer,\n\tgetBufferTemplate,\n\tgetLastValidPosition,\n\tisMask,\n\tresetMaskSet,\n\tseekNext,\n\tseekPrevious,\n\ttranslatePosition\n};\n\n//tobe put on prototype?\nfunction caret(input, begin, end, notranslate, isDelete) {\n\tconst inputmask = this,\n\t\topts = this.opts;\n\n\tvar range;\n\tif (begin !== undefined) {\n\t\tif (Array.isArray(begin)) {\n\t\t\tend = inputmask.isRTL ? begin[0] : begin[1];\n\t\t\tbegin = inputmask.isRTL ? begin[1] : begin[0];\n\t\t}\n\t\tif (begin.begin !== undefined) {\n\t\t\tend = inputmask.isRTL ? begin.begin : begin.end;\n\t\t\tbegin = inputmask.isRTL ? begin.end : begin.begin;\n\t\t}\n\t\tif (typeof begin === \"number\") {\n\t\t\tbegin = notranslate ? begin : translatePosition.call(inputmask, begin);\n\t\t\tend = notranslate ? end : translatePosition.call(inputmask, end);\n\t\t\tend = (typeof end == \"number\") ? end : begin;\n\t\t\t// if (!$(input).is(\":visible\")) {\n\t\t\t// \treturn;\n\t\t\t// }\n\n\t\t\tvar scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;\n\t\t\tinput.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0;\n\t\t\tinput.inputmask.caretPos = {begin: begin, end: end}; //track caret internally\n\t\t\tif (opts.insertModeVisual && opts.insertMode === false && begin === end) {\n\t\t\t\tif (!isDelete) {\n\t\t\t\t\tend++; //set visualization for insert/overwrite mode\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (input === (input.inputmask.shadowRoot || input.ownerDocument).activeElement) {\n\t\t\t\tif (\"setSelectionRange\" in input) {\n\t\t\t\t\tinput.setSelectionRange(begin, end);\n\t\t\t\t} else if (window.getSelection) {\n\t\t\t\t\trange = document.createRange();\n\t\t\t\t\tif (input.firstChild === undefined || input.firstChild === null) {\n\t\t\t\t\t\tvar textNode = document.createTextNode(\"\");\n\t\t\t\t\t\tinput.appendChild(textNode);\n\t\t\t\t\t}\n\t\t\t\t\trange.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length);\n\t\t\t\t\trange.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length);\n\t\t\t\t\trange.collapse(true);\n\t\t\t\t\tvar sel = window.getSelection();\n\t\t\t\t\tsel.removeAllRanges();\n\t\t\t\t\tsel.addRange(range);\n\t\t\t\t\t//input.focus();\n\t\t\t\t} else if (input.createTextRange) {\n\t\t\t\t\trange = input.createTextRange();\n\t\t\t\t\trange.collapse(true);\n\t\t\t\t\trange.moveEnd(\"character\", end);\n\t\t\t\t\trange.moveStart(\"character\", begin);\n\t\t\t\t\trange.select();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (\"selectionStart\" in input && \"selectionEnd\" in input) {\n\t\t\tbegin = input.selectionStart;\n\t\t\tend = input.selectionEnd;\n\t\t} else if (window.getSelection) {\n\t\t\trange = window.getSelection().getRangeAt(0);\n\t\t\tif (range.commonAncestorContainer.parentNode === input || range.commonAncestorContainer === input) {\n\t\t\t\tbegin = range.startOffset;\n\t\t\t\tend = range.endOffset;\n\t\t\t}\n\t\t} else if (document.selection && document.selection.createRange) {\n\t\t\trange = document.selection.createRange();\n\t\t\tbegin = 0 - range.duplicate().moveStart(\"character\", -input.inputmask._valueGet().length);\n\t\t\tend = begin + range.text.length;\n\t\t}\n\n\t\t// if (opts.insertModeVisual && opts.insertMode === false && begin === (end - 1)) end--; //correct caret for insert/overwrite mode\n\n\t\t/*eslint-disable consistent-return */\n\t\treturn {\n\t\t\t\"begin\": notranslate ? begin : translatePosition.call(inputmask, begin),\n\t\t\t\"end\": notranslate ? end : translatePosition.call(inputmask, end)\n\t\t};\n\t\t/*eslint-enable consistent-return */\n\t}\n}\n\n//tobe put on prototype?\nfunction determineLastRequiredPosition(returnDefinition) {\n\tconst inputmask = this,\n\t\tmaskset = this.maskset,\n\t\t$ = this.dependencyLib;\n\n\tvar buffer = getMaskTemplate.call(inputmask, true, getLastValidPosition.call(inputmask), true, true),\n\t\tbl = buffer.length,\n\t\tpos, lvp = getLastValidPosition.call(inputmask),\n\t\tpositions = {},\n\t\tlvTest = maskset.validPositions[lvp],\n\t\tndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined,\n\t\ttestPos;\n\tfor (pos = lvp + 1; pos < buffer.length; pos++) {\n\t\ttestPos = getTestTemplate.call(inputmask, pos, ndxIntlzr, pos - 1);\n\t\tndxIntlzr = testPos.locator.slice();\n\t\tpositions[pos] = $.extend(true, {}, testPos);\n\t}\n\n\tvar lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;\n\tfor (pos = bl - 1; pos > lvp; pos--) {\n\t\ttestPos = positions[pos];\n\t\tif ((testPos.match.optionality ||\n\t\t\t(testPos.match.optionalQuantifier && testPos.match.newBlockMarker) ||\n\t\t\t(lvTestAlt &&\n\t\t\t\t(\n\t\t\t\t\t(lvTestAlt !== positions[pos].locator[lvTest.alternation] && testPos.match.static != true) ||\n\t\t\t\t\t(testPos.match.static === true &&\n\t\t\t\t\t\ttestPos.locator[lvTest.alternation] &&\n\t\t\t\t\t\tcheckAlternationMatch.call(inputmask, testPos.locator[lvTest.alternation].toString().split(\",\"), lvTestAlt.toString().split(\",\")) &&\n\t\t\t\t\t\tgetTests.call(inputmask, pos)[0].def !== \"\")\n\t\t\t\t)\n\t\t\t)) &&\n\t\t\tbuffer[pos] === getPlaceholder.call(inputmask, pos, testPos.match)) {\n\t\t\tbl--;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn returnDefinition ? {\n\t\t\"l\": bl,\n\t\t\"def\": positions[bl] ? positions[bl].match : undefined\n\t} : bl;\n}\n\n//tobe put on prototype?\nfunction determineNewCaretPosition(selectedCaret, tabbed, positionCaretOnClick) {\n\tconst inputmask = this,\n\t\tmaskset = this.maskset,\n\t\topts = this.opts;\n\n\tfunction doRadixFocus(clickPos) {\n\t\tif (opts.radixPoint !== \"\" && opts.digits !== 0) {\n\t\t\tvar vps = maskset.validPositions;\n\t\t\tif (vps[clickPos] === undefined || (vps[clickPos].input === getPlaceholder.call(inputmask, clickPos))) {\n\t\t\t\tif (clickPos < seekNext.call(inputmask, -1)) return true;\n\t\t\t\tvar radixPos = getBuffer.call(inputmask).indexOf(opts.radixPoint);\n\t\t\t\tif (radixPos !== -1) {\n\t\t\t\t\tfor (var vp in vps) {\n\t\t\t\t\t\tif (vps[vp] && radixPos < vp && vps[vp].input !== getPlaceholder.call(inputmask, vp)) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tif (tabbed) {\n\t\tif (inputmask.isRTL) {\n\t\t\tselectedCaret.end = selectedCaret.begin;\n\t\t} else {\n\t\t\tselectedCaret.begin = selectedCaret.end;\n\t\t}\n\t}\n\tif (selectedCaret.begin === selectedCaret.end) {\n\t\tpositionCaretOnClick = positionCaretOnClick || opts.positionCaretOnClick;\n\t\tswitch (positionCaretOnClick) {\n\t\t\tcase \"none\":\n\t\t\t\tbreak;\n\t\t\tcase \"select\":\n\t\t\t\tselectedCaret = {begin: 0, end: getBuffer.call(inputmask).length};\n\t\t\t\tbreak;\n\t\t\tcase \"ignore\":\n\t\t\t\tselectedCaret.end = selectedCaret.begin = seekNext.call(inputmask, getLastValidPosition.call(inputmask));\n\t\t\t\tbreak;\n\t\t\tcase \"radixFocus\":\n\t\t\t\tif (doRadixFocus(selectedCaret.begin)) {\n\t\t\t\t\tvar radixPos = getBuffer.call(inputmask).join(\"\").indexOf(opts.radixPoint);\n\t\t\t\t\tselectedCaret.end = selectedCaret.begin = opts.numericInput ? seekNext.call(inputmask, radixPos) : radixPos;\n\t\t\t\t\tbreak;\n\t\t\t\t} //fallback to lvp\n\t\t\t// eslint-disable-next-line no-fallthrough\n\t\t\tdefault: //lvp:\n\t\t\t\tvar clickPosition = selectedCaret.begin,\n\t\t\t\t\tlvclickPosition = getLastValidPosition.call(inputmask, clickPosition, true),\n\t\t\t\t\tlastPosition = seekNext.call(inputmask, (lvclickPosition === -1 && !isMask.call(inputmask, 0)) ? -1 : lvclickPosition);\n\n\t\t\t\tif (clickPosition <= lastPosition) {\n\t\t\t\t\tselectedCaret.end = selectedCaret.begin = !isMask.call(inputmask, clickPosition, false, true) ? seekNext.call(inputmask, clickPosition) : clickPosition;\n\t\t\t\t} else {\n\t\t\t\t\tvar lvp = maskset.validPositions[lvclickPosition],\n\t\t\t\t\t\ttt = getTestTemplate.call(inputmask, lastPosition, lvp ? lvp.match.locator : undefined, lvp),\n\t\t\t\t\t\tplaceholder = getPlaceholder.call(inputmask, lastPosition, tt.match);\n\t\t\t\t\tif ((placeholder !== \"\" && getBuffer.call(inputmask)[lastPosition] !== placeholder && tt.match.optionalQuantifier !== true && tt.match.newBlockMarker !== true) || (!isMask.call(inputmask, lastPosition, opts.keepStatic, true) && tt.match.def === placeholder)) {\n\t\t\t\t\t\tvar newPos = seekNext.call(inputmask, lastPosition);\n\t\t\t\t\t\tif (clickPosition >= newPos || clickPosition === lastPosition) {\n\t\t\t\t\t\t\tlastPosition = newPos;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tselectedCaret.end = selectedCaret.begin = lastPosition;\n\t\t\t\t}\n\t\t}\n\n\t\treturn selectedCaret;\n\t}\n}\n\n\n//tobe put on prototype?\nfunction getBuffer(noCache) {\n\tconst inputmask = this, maskset = this.maskset;\n\n\tif (maskset.buffer === undefined || noCache === true) {\n\t\tmaskset.buffer = getMaskTemplate.call(inputmask, true, getLastValidPosition.call(inputmask), true);\n\t\tif (maskset._buffer === undefined) maskset._buffer = maskset.buffer.slice();\n\t}\n\treturn maskset.buffer;\n}\n\n//tobe put on prototype?\nfunction getBufferTemplate() {\n\tconst inputmask = this, maskset = this.maskset;\n\n\tif (maskset._buffer === undefined) {\n\t\t//generate template\n\t\tmaskset._buffer = getMaskTemplate.call(inputmask, false, 1);\n\t\tif (maskset.buffer === undefined) maskset.buffer = maskset._buffer.slice();\n\t}\n\treturn maskset._buffer;\n}\n\n//tobe put on prototype?\nfunction getLastValidPosition(closestTo, strict, validPositions) {\n\tconst maskset = this.maskset;\n\n\tvar before = -1,\n\t\tafter = -1,\n\t\tvalids = validPositions || maskset.validPositions; //for use in valhook ~ context switch\n\tif (closestTo === undefined) closestTo = -1;\n\tfor (var posNdx in valids) {\n\t\tvar psNdx = parseInt(posNdx);\n\t\tif (valids[psNdx] && (strict || valids[psNdx].generatedInput !== true)) {\n\t\t\tif (psNdx <= closestTo) before = psNdx;\n\t\t\tif (psNdx >= closestTo) after = psNdx;\n\t\t}\n\t}\n\treturn (before === -1 || before == closestTo) ? after : after == -1 ? before : (closestTo - before) < (after - closestTo) ? before : after;\n}\n\n//tobe put on prototype?\nfunction isMask(pos, strict, fuzzy) {\n\tconst inputmask = this, maskset = this.maskset;\n\n\tvar test = getTestTemplate.call(inputmask, pos).match;\n\tif (test.def === \"\") test = getTest.call(inputmask, pos).match;\n\n\tif (test.static !== true) {\n\t\treturn test.fn;\n\t}\n\tif (fuzzy === true && (maskset.validPositions[pos] !== undefined && maskset.validPositions[pos].generatedInput !== true)) {\n\t\treturn true;\n\t}\n\n\tif (strict !== true && pos > -1) {\n\t\tif (fuzzy) { //check on the number of tests\n\t\t\tvar tests = getTests.call(inputmask, pos);\n\t\t\treturn tests.length > (1 + (tests[tests.length - 1].match.def === \"\" ? 1 : 0));\n\t\t}\n\t\t//else based on the template\n\t\tvar testTemplate = determineTestTemplate.call(inputmask, pos, getTests.call(inputmask, pos));\n\t\tvar testPlaceHolder = getPlaceholder.call(inputmask, pos, testTemplate.match);\n\t\treturn testTemplate.match.def !== testPlaceHolder;\n\n\t}\n\treturn false;\n}\n\n//tobe put on prototype?\nfunction resetMaskSet(soft) {\n\tconst maskset = this.maskset;\n\n\tmaskset.buffer = undefined;\n\tif (soft !== true) {\n\t\tmaskset.validPositions = {};\n\t\tmaskset.p = 0;\n\t}\n}\n\n//tobe put on prototype?\nfunction seekNext(pos, newBlock, fuzzy) {\n\tconst inputmask = this;\n\n\tif (fuzzy === undefined) fuzzy = true;\n\tvar position = pos + 1;\n\twhile (getTest.call(inputmask, position).match.def !== \"\" &&\n\t((newBlock === true && (getTest.call(inputmask, position).match.newBlockMarker !== true || !isMask.call(inputmask, position, undefined, true))) ||\n\t\t(newBlock !== true && !isMask.call(inputmask, position, undefined, fuzzy)))) {\n\t\tposition++;\n\t}\n\treturn position;\n}\n\n//tobe put on prototype?\nfunction seekPrevious(pos, newBlock) {\n\tconst inputmask = this;\n\n\tvar position = pos - 1;\n\tif (pos <= 0) return 0;\n\n\twhile (position > 0 &&\n\t((newBlock === true && (getTest.call(inputmask, position).match.newBlockMarker !== true || !isMask.call(inputmask, position, undefined, true))) ||\n\t\t(newBlock !== true && !isMask.call(inputmask, position, undefined, true)))) {\n\t\tposition--;\n\t}\n\treturn position;\n}\n\n//tobe put on prototype?\nfunction translatePosition(pos) {\n\tconst inputmask = this,\n\t\topts = this.opts,\n\t\tel = this.el;\n\n\tif (inputmask.isRTL && typeof pos === \"number\" && (!opts.greedy || opts.placeholder !== \"\") && el) {\n\t\tpos = Math.abs(inputmask._valueGet().length - pos);\n\t}\n\treturn pos;\n}\n","export {\n\tdetermineTestTemplate,\n\tgetDecisionTaker,\n\tgetMaskTemplate,\n\tgetPlaceholder,\n\tgetTest,\n\tgetTests,\n\tgetTestTemplate,\n\tisSubsetOf\n};\n\nfunction getLocator(tst, align) { //need to align the locators to be correct\n\tvar locator = (tst.alternation != undefined ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join(\"\");\n\tif (locator !== \"\") while (locator.length < align) locator += \"0\";\n\treturn locator;\n}\n\nfunction getDecisionTaker(tst) {\n\tvar decisionTaker = tst.locator[tst.alternation];\n\tif (typeof decisionTaker == \"string\" && decisionTaker.length > 0) { //no decision taken ~ take first one as decider\n\t\tdecisionTaker = decisionTaker.split(\",\")[0];\n\t}\n\treturn decisionTaker !== undefined ? decisionTaker.toString() : \"\";\n}\n\n//tobe put on prototype?\nfunction getPlaceholder(pos, test, returnPL) {\n\tconst inputmask = this,\n\t\topts = this.opts,\n\t\tmaskset = this.maskset;\n\n\ttest = test || getTest.call(inputmask, pos).match;\n\tif (test.placeholder !== undefined || returnPL === true) {\n\t\treturn typeof test.placeholder === \"function\" ? test.placeholder(opts) : test.placeholder;\n\t} else if (test.static === true) {\n\t\tif (pos > -1 && maskset.validPositions[pos] === undefined) {\n\t\t\tvar tests = getTests.call(inputmask, pos),\n\t\t\t\tstaticAlternations = [],\n\t\t\t\tprevTest;\n\t\t\tif (tests.length > 1 + (tests[tests.length - 1].match.def === \"\" ? 1 : 0)) {\n\t\t\t\tfor (var i = 0; i < tests.length; i++) {\n\t\t\t\t\tif (tests[i].match.def !== \"\" && tests[i].match.optionality !== true && tests[i].match.optionalQuantifier !== true &&\n\t\t\t\t\t\t(tests[i].match.static === true || (prevTest === undefined || tests[i].match.fn.test(prevTest.match.def, maskset, pos, true, opts) !== false))) {\n\t\t\t\t\t\tstaticAlternations.push(tests[i]);\n\t\t\t\t\t\tif (tests[i].match.static === true) prevTest = tests[i];\n\t\t\t\t\t\tif (staticAlternations.length > 1) {\n\t\t\t\t\t\t\tif (/[0-9a-bA-Z]/.test(staticAlternations[0].match.def)) {\n\t\t\t\t\t\t\t\treturn opts.placeholder.charAt(pos % opts.placeholder.length);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn test.def;\n\t}\n\n\treturn opts.placeholder.charAt(pos % opts.placeholder.length);\n}\n\n//tobe put on prototype?\nfunction getMaskTemplate(baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {\n\t//includeMode true => input, undefined => placeholder, false => mask\n\n\tvar inputmask = this,\n\t\topts = this.opts,\n\t\tmaskset = this.maskset;\n\n\n\tvar greedy = opts.greedy;\n\tif (clearOptionalTail) opts.greedy = false;\n\tminimalPos = minimalPos || 0;\n\tvar maskTemplate = [],\n\t\tndxIntlzr, pos = 0,\n\t\ttest, testPos, jitRenderStatic;\n\tdo {\n\t\tif (baseOnInput === true && maskset.validPositions[pos]) {\n\t\t\ttestPos = (clearOptionalTail && maskset.validPositions[pos].match.optionality === true\n\t\t\t\t&& maskset.validPositions[pos + 1] === undefined\n\t\t\t\t&& (maskset.validPositions[pos].generatedInput === true || (maskset.validPositions[pos].input == opts.skipOptionalPartCharacter && pos > 0)))\n\t\t\t\t? determineTestTemplate.call(inputmask, pos, getTests.call(inputmask, pos, ndxIntlzr, pos - 1))\n\t\t\t\t: maskset.validPositions[pos];\n\t\t\ttest = testPos.match;\n\t\t\tndxIntlzr = testPos.locator.slice();\n\t\t\tmaskTemplate.push(includeMode === true ? testPos.input : includeMode === false ? test.nativeDef : getPlaceholder.call(inputmask, pos, test));\n\t\t} else {\n\t\t\ttestPos = getTestTemplate.call(inputmask, pos, ndxIntlzr, pos - 1);\n\t\t\ttest = testPos.match;\n\t\t\tndxIntlzr = testPos.locator.slice();\n\t\t\tvar jitMasking = noJit === true ? false : (opts.jitMasking !== false ? opts.jitMasking : test.jit);\n\t\t\t//check for groupSeparator is a hack for the numerics as we don't want the render of the groupSeparator beforehand\n\t\t\tjitRenderStatic = ((jitRenderStatic && test.static && test.def !== opts.groupSeparator && test.fn === null) || (maskset.validPositions[pos - 1] && test.static && test.def !== opts.groupSeparator && test.fn === null)) && maskset.tests[pos] && maskset.tests[pos].length === 1;\n\t\t\tif (jitRenderStatic || jitMasking === false || jitMasking === undefined /*|| pos < lvp*/ || (typeof jitMasking === \"number\" && isFinite(jitMasking) && jitMasking > pos)) {\n\t\t\t\tmaskTemplate.push(includeMode === false ? test.nativeDef : getPlaceholder.call(inputmask, pos, test));\n\t\t\t} else {\n\t\t\t\tjitRenderStatic = false;\n\t\t\t}\n\t\t}\n\n\t\tpos++;\n\t} while ((test.static !== true || test.def !== \"\") || minimalPos > pos);\n\tif (maskTemplate[maskTemplate.length - 1] === \"\") {\n\t\tmaskTemplate.pop(); //drop the last one which is empty\n\t}\n\tif (includeMode !== false || //do not alter the masklength when just retrieving the maskdefinition\n\t\tmaskset.maskLength === undefined) //just make sure the maskLength gets initialized in all cases (needed for isValid)\n\t{\n\t\tmaskset.maskLength = pos - 1;\n\t}\n\n\topts.greedy = greedy;\n\treturn maskTemplate;\n}\n\n//tobe put on prototype?\nfunction getTestTemplate(pos, ndxIntlzr, tstPs) {\n\tvar inputmask = this,\n\t\tmaskset = this.maskset;\n\n\treturn maskset.validPositions[pos] || determineTestTemplate.call(inputmask, pos, getTests.call(inputmask, pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));\n}\n\n//tobe put on prototype?\nfunction determineTestTemplate(pos, tests) {\n\tvar inputmask = this,\n\t\topts = this.opts;\n\n\tpos = pos > 0 ? pos - 1 : 0;\n\tvar altTest = getTest.call(inputmask, pos), targetLocator = getLocator(altTest), tstLocator, closest, bestMatch;\n\tfor (var ndx = 0; ndx < tests.length; ndx++) { //find best matching\n\t\tvar tst = tests[ndx];\n\t\ttstLocator = getLocator(tst, targetLocator.length);\n\t\tvar distance = Math.abs(tstLocator - targetLocator);\n\t\tif (closest === undefined\n\t\t\t|| (tstLocator !== \"\" && distance < closest)\n\t\t\t|| (bestMatch && !opts.greedy && bestMatch.match.optionality && bestMatch.match.newBlockMarker === \"master\" && (!tst.match.optionality || !tst.match.newBlockMarker))\n\t\t\t|| (bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier)) {\n\t\t\tclosest = distance;\n\t\t\tbestMatch = tst;\n\t\t}\n\t}\n\n\treturn bestMatch;\n}\n\n//tobe put on prototype?\nfunction getTest(pos, tests) {\n\tvar inputmask = this,\n\t\tmaskset = this.maskset;\n\n\tif (maskset.validPositions[pos]) {\n\t\treturn maskset.validPositions[pos];\n\t}\n\treturn (tests || getTests.call(inputmask, pos))[0];\n}\n\nfunction isSubsetOf(source, target, opts) {\n\tfunction expand(pattern) {\n\t\tvar expanded = [], start = -1, end;\n\t\tfor (var i = 0, l = pattern.length; i < l; i++) {\n\t\t\tif (pattern.charAt(i) === \"-\") {\n\t\t\t\tend = pattern.charCodeAt(i + 1);\n\t\t\t\twhile (++start < end) expanded.push(String.fromCharCode(start));\n\t\t\t} else {\n\t\t\t\tstart = pattern.charCodeAt(i);\n\t\t\t\texpanded.push(pattern.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn expanded.join(\"\");\n\t}\n\n\tif (source.match.def === target.match.nativeDef) return true;\n\tif ((opts.regex || (source.match.fn instanceof RegExp && target.match.fn instanceof RegExp)) && source.match.static !== true && target.match.static !== true) { //is regex a subset\n\t\treturn expand(target.match.fn.toString().replace(/[[\\]/]/g, \"\")).indexOf(expand(source.match.fn.toString().replace(/[[\\]/]/g, \"\"))) !== -1;\n\t}\n\treturn false;\n}\n\n//tobe put on prototype?\nfunction getTests(pos, ndxIntlzr, tstPs) {\n\tvar inputmask = this,\n\t\t$ = this.dependencyLib,\n\t\tmaskset = this.maskset,\n\t\topts = this.opts,\n\t\tel = this.el,\n\t\tmaskTokens = maskset.maskToken,\n\t\ttestPos = ndxIntlzr ? tstPs : 0,\n\t\tndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [0],\n\t\tmatches = [],\n\t\tinsertStop = false,\n\t\tlatestMatch,\n\t\tcacheDependency = ndxIntlzr ? ndxIntlzr.join(\"\") : \"\";\n\n\tfunction resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) { //ndxInitializer contains a set of indexes to speedup searches in the mtokens\n\t\tfunction handleMatch(match, loopNdx, quantifierRecurse) {\n\t\t\tfunction isFirstMatch(latestMatch, tokenGroup) {\n\t\t\t\tvar firstMatch = tokenGroup.matches.indexOf(latestMatch) === 0;\n\t\t\t\tif (!firstMatch) {\n\t\t\t\t\ttokenGroup.matches.every(function (match, ndx) {\n\t\t\t\t\t\tif (match.isQuantifier === true) {\n\t\t\t\t\t\t\tfirstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]);\n\t\t\t\t\t\t} else if (Object.prototype.hasOwnProperty.call(match, \"matches\")) firstMatch = isFirstMatch(latestMatch, match);\n\t\t\t\t\t\tif (firstMatch) return false;\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\treturn firstMatch;\n\t\t\t}\n\n\t\t\tfunction resolveNdxInitializer(pos, alternateNdx, targetAlternation) {\n\t\t\t\tvar bestMatch, indexPos;\n\n\t\t\t\tif (maskset.tests[pos] || maskset.validPositions[pos]) {\n\t\t\t\t\t(maskset.tests[pos] || [maskset.validPositions[pos]]).every(function (lmnt, ndx) {\n\t\t\t\t\t\tif (lmnt.mloc[alternateNdx]) {\n\t\t\t\t\t\t\tbestMatch = lmnt;\n\t\t\t\t\t\t\treturn false; //break\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation,\n\t\t\t\t\t\t\tndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;\n\t\t\t\t\t\tif ((indexPos === undefined || ndxPos < indexPos) && ndxPos !== -1) {\n\t\t\t\t\t\t\tbestMatch = lmnt;\n\t\t\t\t\t\t\tindexPos = ndxPos;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (bestMatch) {\n\t\t\t\t\tvar bestMatchAltIndex = bestMatch.locator[bestMatch.alternation];\n\t\t\t\t\tvar locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;\n\t\t\t\t\treturn locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction staticCanMatchDefinition(source, target) {\n\t\t\t\treturn source.match.static === true && target.match.static !== true ? target.match.fn.test(source.match.def, maskset, pos, false, opts, false) : false;\n\t\t\t}\n\n\t\t\t//mergelocators for retrieving the correct locator match when merging\n\t\t\tfunction setMergeLocators(targetMatch, altMatch) {\n\t\t\t\tvar alternationNdx = targetMatch.alternation,\n\t\t\t\t\tshouldMerge = altMatch === undefined || (alternationNdx === altMatch.alternation &&\n\t\t\t\t\t\ttargetMatch.locator[alternationNdx].toString().indexOf(altMatch.locator[alternationNdx]) === -1);\n\t\t\t\tif (!shouldMerge && alternationNdx > altMatch.alternation) {\n\t\t\t\t\tfor (var i = altMatch.alternation; i < alternationNdx; i++) {\n\t\t\t\t\t\tif (targetMatch.locator[i] !== altMatch.locator[i]) {\n\t\t\t\t\t\t\talternationNdx = i;\n\t\t\t\t\t\t\tshouldMerge = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shouldMerge) {\n\t\t\t\t\ttargetMatch.mloc = targetMatch.mloc || {};\n\t\t\t\t\tvar locNdx = targetMatch.locator[alternationNdx];\n\t\t\t\t\tif (locNdx === undefined) {\n\t\t\t\t\t\ttargetMatch.alternation = undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (typeof locNdx === \"string\") locNdx = locNdx.split(\",\")[0];\n\t\t\t\t\t\tif (targetMatch.mloc[locNdx] === undefined) targetMatch.mloc[locNdx] = targetMatch.locator.slice();\n\t\t\t\t\t\tif (altMatch !== undefined) {\n\t\t\t\t\t\t\tfor (var ndx in altMatch.mloc) {\n\t\t\t\t\t\t\t\tif (typeof ndx === \"string\") ndx = ndx.split(\",\")[0];\n\t\t\t\t\t\t\t\tif (targetMatch.mloc[ndx] === undefined) targetMatch.mloc[ndx] = altMatch.mloc[ndx];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttargetMatch.locator[alternationNdx] = Object.keys(targetMatch.mloc).join(\",\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfunction isSameLevel(targetMatch, altMatch) {\n\t\t\t\tif (targetMatch.locator.length !== altMatch.locator.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (let locNdx = targetMatch.alternation + 1; locNdx < targetMatch.locator.length; locNdx++) {\n\t\t\t\t\tif (targetMatch.locator[locNdx] !== altMatch.locator[locNdx]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (testPos > (pos + opts._maxTestPos)) {\n\t\t\t\tthrow \"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. \" + maskset.mask;\n\t\t\t}\n\t\t\tif (testPos === pos && match.matches === undefined) {\n\t\t\t\tmatches.push({\n\t\t\t\t\t\"match\": match,\n\t\t\t\t\t\"locator\": loopNdx.reverse(),\n\t\t\t\t\t\"cd\": cacheDependency,\n\t\t\t\t\t\"mloc\": {}\n\t\t\t\t});\n\t\t\t\treturn true;\n\t\t\t} else if (match.matches !== undefined) {\n\t\t\t\tif (match.isGroup && quantifierRecurse !== match) { //when a group pass along to the quantifier\n\t\t\t\t\tmatch = handleMatch(maskToken.matches[maskToken.matches.indexOf(match) + 1], loopNdx, quantifierRecurse);\n\t\t\t\t\tif (match) return true;\n\t\t\t\t} else if (match.isOptional) {\n\t\t\t\t\tvar optionalToken = match, mtchsNdx = matches.length;\n\t\t\t\t\tmatch = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\t//mark optionality in matches\n\t\t\t\t\t\tmatches.forEach(function (mtch, ndx) {\n\t\t\t\t\t\t\tif (ndx >= mtchsNdx) {\n\t\t\t\t\t\t\t\tmtch.match.optionality = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlatestMatch = matches[matches.length - 1].match;\n\t\t\t\t\t\tif (quantifierRecurse === undefined && isFirstMatch(latestMatch, optionalToken)) { //prevent loop see #698\n\t\t\t\t\t\t\tinsertStop = true; //insert a stop\n\t\t\t\t\t\t\ttestPos = pos; //match the position after the group\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (match.isAlternator) {\n\t\t\t\t\tvar alternateToken = match,\n\t\t\t\t\t\tmalternateMatches = [],\n\t\t\t\t\t\tmaltMatches,\n\t\t\t\t\t\tcurrentMatches = matches.slice(),\n\t\t\t\t\t\tloopNdxCnt = loopNdx.length,\n\t\t\t\t\t\tunMatchedAlternation = false;\n\t\t\t\t\tvar altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;\n\t\t\t\t\tif (altIndex === -1 || typeof altIndex === \"string\") {\n\t\t\t\t\t\tvar currentPos = testPos,\n\t\t\t\t\t\t\tndxInitializerClone = ndxInitializer.slice(),\n\t\t\t\t\t\t\taltIndexArr = [],\n\t\t\t\t\t\t\tamndx;\n\t\t\t\t\t\tif (typeof altIndex == \"string\") {\n\t\t\t\t\t\t\taltIndexArr = altIndex.split(\",\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (amndx = 0; amndx < alternateToken.matches.length; amndx++) {\n\t\t\t\t\t\t\t\taltIndexArr.push(amndx.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (maskset.excludes[pos] !== undefined) {\n\t\t\t\t\t\t\tvar altIndexArrClone = altIndexArr.slice();\n\t\t\t\t\t\t\tfor (var i = 0, exl = maskset.excludes[pos].length; i < exl; i++) {\n\t\t\t\t\t\t\t\tvar excludeSet = maskset.excludes[pos][i].toString().split(\":\");\n\t\t\t\t\t\t\t\tif (loopNdx.length == excludeSet[1]) {\n\t\t\t\t\t\t\t\t\taltIndexArr.splice(altIndexArr.indexOf(excludeSet[0]), 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (altIndexArr.length === 0) { //fully alternated => reset\n\t\t\t\t\t\t\t\tdelete maskset.excludes[pos];\n\t\t\t\t\t\t\t\taltIndexArr = altIndexArrClone;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (opts.keepStatic === true || (isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic)) altIndexArr = altIndexArr.slice(0, 1);\n\t\t\t\t\t\tfor (var ndx = 0; ndx < altIndexArr.length; ndx++) {\n\t\t\t\t\t\t\tamndx = parseInt(altIndexArr[ndx]);\n\t\t\t\t\t\t\tmatches = [];\n\t\t\t\t\t\t\t//set the correct ndxInitializer\n\t\t\t\t\t\t\tndxInitializer = typeof altIndex === \"string\" ? resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice() : ndxInitializerClone.slice();\n\t\t\t\t\t\t\tvar tokenMatch = alternateToken.matches[amndx];\n\t\t\t\t\t\t\tif (tokenMatch && handleMatch(tokenMatch, [amndx].concat(loopNdx), quantifierRecurse)) {\n\t\t\t\t\t\t\t\tmatch = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (ndx === 0) {\n\t\t\t\t\t\t\t\t\tunMatchedAlternation = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (tokenMatch && tokenMatch.matches && tokenMatch.matches.length > alternateToken.matches[0].matches.length) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaltMatches = matches.slice();\n\t\t\t\t\t\t\ttestPos = currentPos;\n\t\t\t\t\t\t\tmatches = [];\n\n\t\t\t\t\t\t\t//fuzzy merge matches\n\t\t\t\t\t\t\tfor (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {\n\t\t\t\t\t\t\t\tvar altMatch = maltMatches[ndx1],\n\t\t\t\t\t\t\t\t\tdropMatch = false;\n\t\t\t\t\t\t\t\taltMatch.match.jit = altMatch.match.jit || unMatchedAlternation; //mark jit when there are unmatched alternations  ex: mask: \"(a|aa)\"\n\t\t\t\t\t\t\t\taltMatch.alternation = altMatch.alternation || loopNdxCnt;\n\t\t\t\t\t\t\t\tsetMergeLocators(altMatch);\n\t\t\t\t\t\t\t\tfor (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {\n\t\t\t\t\t\t\t\t\tvar altMatch2 = malternateMatches[ndx2];\n\t\t\t\t\t\t\t\t\tif (typeof altIndex !== \"string\" || (altMatch.alternation !== undefined && altIndexArr.includes(altMatch.locator[altMatch.alternation].toString()))) {\n\t\t\t\t\t\t\t\t\t\tif (altMatch.match.nativeDef === altMatch2.match.nativeDef) {\n\t\t\t\t\t\t\t\t\t\t\tdropMatch = true;\n\t\t\t\t\t\t\t\t\t\t\tsetMergeLocators(altMatch2, altMatch);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t} else if (isSubsetOf(altMatch, altMatch2, opts)) {\n\t\t\t\t\t\t\t\t\t\t\tif (setMergeLocators(altMatch, altMatch2)) {\n\t\t\t\t\t\t\t\t\t\t\t\tdropMatch = true;\n\t\t\t\t\t\t\t\t\t\t\t\tmalternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t} else if (isSubsetOf(altMatch2, altMatch, opts)) {\n\t\t\t\t\t\t\t\t\t\t\tsetMergeLocators(altMatch2, altMatch);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t} else if (staticCanMatchDefinition(altMatch, altMatch2)) {\n\t\t\t\t\t\t\t\t\t\t\tif (!isSameLevel(altMatch, altMatch2) && el.inputmask.userOptions.keepStatic === undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\topts.keepStatic = true;\n\t\t\t\t\t\t\t\t\t\t\t} else if (setMergeLocators(altMatch, altMatch2)) {\n\t\t\t\t\t\t\t\t\t\t\t\t//insert match above general match\n\t\t\t\t\t\t\t\t\t\t\t\tdropMatch = true;\n\t\t\t\t\t\t\t\t\t\t\t\tmalternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!dropMatch) {\n\t\t\t\t\t\t\t\t\tmalternateMatches.push(altMatch);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmatches = currentMatches.concat(malternateMatches);\n\t\t\t\t\t\ttestPos = pos;\n\t\t\t\t\t\tinsertStop = matches.length > 0; //insert a stopelemnt when there is an alternate - needed for non-greedy option\n\t\t\t\t\t\tmatch = malternateMatches.length > 0; //set correct match state\n\n\t\t\t\t\t\t//cloneback\n\t\t\t\t\t\tndxInitializer = ndxInitializerClone.slice();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);\n\t\t\t\t\t}\n\t\t\t\t\tif (match) return true;\n\t\t\t\t} else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[maskToken.matches.indexOf(match) - 1]) {\n\t\t\t\t\tvar qt = match;\n\t\t\t\t\tfor (var qndx = (ndxInitializer.length > 0) ? ndxInitializer.shift() : 0; (qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max)) && testPos <= pos; qndx++) {\n\t\t\t\t\t\tvar tokenGroup = maskToken.matches[maskToken.matches.indexOf(qt) - 1];\n\t\t\t\t\t\tmatch = handleMatch(tokenGroup, [qndx].concat(loopNdx), tokenGroup); //set the tokenGroup as quantifierRecurse marker\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t//get latest match\n\t\t\t\t\t\t\tlatestMatch = matches[matches.length - 1].match;\n\t\t\t\t\t\t\t//mark optionality\n\t\t\t\t\t\t\t//TODO FIX RECURSIVE QUANTIFIERS\n\t\t\t\t\t\t\tlatestMatch.optionalQuantifier = qndx >= qt.quantifier.min;\n\t\t\t\t\t\t\t// console.log(pos + \" \" + qt.quantifier.min + \" \" + latestMatch.optionalQuantifier);\n\t\t\t\t\t\t\t//qndx + 1 as the index starts from 0\n\t\t\t\t\t\t\tlatestMatch.jit = (qndx + 1) * (tokenGroup.matches.indexOf(latestMatch) + 1) > qt.quantifier.jit;\n\t\t\t\t\t\t\tif (latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {\n\t\t\t\t\t\t\t\tinsertStop = true;\n\t\t\t\t\t\t\t\ttestPos = pos; //match the position after the group\n\t\t\t\t\t\t\t\tbreak; //stop quantifierloop && search for next possible match\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (latestMatch.jit /*&& !latestMatch.optionalQuantifier*/) {\n\t\t\t\t\t\t\t\t//always set jitOffset, isvalid checks when to apply\n\t\t\t\t\t\t\t\tmaskset.jitOffset[pos] = tokenGroup.matches.length - tokenGroup.matches.indexOf(latestMatch);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmatch = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);\n\t\t\t\t\tif (match) return true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestPos++;\n\t\t\t}\n\t\t}\n\n\t\t//the offset is set in the quantifierloop when git masking is used\n\t\tfor (var tndx = (ndxInitializer.length > 0 ? ndxInitializer.shift() : 0); tndx < maskToken.matches.length; tndx++) {\n\t\t\tif (maskToken.matches[tndx].isQuantifier !== true) {\n\t\t\t\tvar match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);\n\t\t\t\tif (match && testPos === pos) {\n\t\t\t\t\treturn match;\n\t\t\t\t} else if (testPos > pos) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction mergeLocators(pos, tests) {\n\t\tlet locator = [], alternation;\n\t\tif (!Array.isArray(tests)) tests = [tests];\n\n\t\tif (tests.length > 0) {\n\t\t\tif (tests[0].alternation === undefined || opts.keepStatic === true) {\n\t\t\t\tlocator = determineTestTemplate.call(inputmask, pos, tests.slice()).locator.slice();\n\t\t\t\tif (locator.length === 0) locator = tests[0].locator.slice();\n\t\t\t} else {\n\t\t\t\ttests.forEach(function (tst) {\n\t\t\t\t\tif (tst.def !== \"\") {\n\t\t\t\t\t\tif (locator.length === 0) {\n\t\t\t\t\t\t\talternation = tst.alternation;\n\t\t\t\t\t\t\tlocator = tst.locator.slice();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (tst.locator[alternation] && locator[alternation].toString().indexOf(tst.locator[alternation]) === -1) {\n\t\t\t\t\t\t\t\tlocator[alternation] += \",\" + tst.locator[alternation];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn locator;\n\t}\n\n\tif (pos > -1) {\n\t\tif (ndxIntlzr === undefined) { //determine index initializer\n\t\t\tvar previousPos = pos - 1,\n\t\t\t\ttest;\n\t\t\twhile ((test = maskset.validPositions[previousPos] || maskset.tests[previousPos]) === undefined && previousPos > -1) {\n\t\t\t\tpreviousPos--;\n\t\t\t}\n\t\t\tif (test !== undefined && previousPos > -1) {\n\t\t\t\tndxInitializer = mergeLocators(previousPos, test);\n\t\t\t\tcacheDependency = ndxInitializer.join(\"\");\n\t\t\t\ttestPos = previousPos;\n\t\t\t}\n\t\t}\n\t\tif (maskset.tests[pos] && maskset.tests[pos][0].cd === cacheDependency) { //cacheDependency is set on all tests, just check on the first\n\t\t\treturn maskset.tests[pos];\n\t\t}\n\t\tfor (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {\n\t\t\tvar match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]);\n\t\t\tif ((match && testPos === pos) || testPos > pos) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (matches.length === 0 || insertStop) {\n\t\tmatches.push({\n\t\t\tmatch: {\n\t\t\t\tfn: null,\n\t\t\t\tstatic: true,\n\t\t\t\toptionality: false,\n\t\t\t\tcasing: null,\n\t\t\t\tdef: \"\",\n\t\t\t\tplaceholder: \"\"\n\t\t\t},\n\t\t\tlocator: [],\n\t\t\tmloc: {},\n\t\t\tcd: cacheDependency\n\t\t});\n\t}\n\n\tif (ndxIntlzr !== undefined && maskset.tests[pos]) { //prioritize full tests for caching\n\t\treturn $.extend(true, [], matches);\n\t}\n\tmaskset.tests[pos] = $.extend(true, [], matches); //set a clone to prevent overwriting some props\n\t// console.log(pos + \" - \" + JSON.stringify(matches));\n\treturn maskset.tests[pos];\n}\n","import {\n\tdetermineTestTemplate,\n\tgetDecisionTaker,\n\tgetPlaceholder,\n\tgetTest,\n\tgetTests,\n\tgetTestTemplate\n} from \"./validation-tests\";\nimport keyCode from \"./keycode.json\";\nimport {\n\tdetermineLastRequiredPosition, determineNewCaretPosition,\n\tgetBuffer,\n\tgetLastValidPosition,\n\tisMask,\n\tresetMaskSet,\n\tseekNext,\n\tseekPrevious, translatePosition\n} from \"./positioning\";\nimport {EventHandlers} from \"./eventhandlers\";\n\nexport {alternate, checkAlternationMatch, isComplete, isValid, refreshFromBuffer, revalidateMask, handleRemove};\n\n//tobe put on prototype?\nfunction alternate(maskPos, c, strict, fromIsValid, rAltPos, selection) { //pos == true => generalize\n\tconst inputmask = this,\n\t\t$ = this.dependencyLib,\n\t\topts = this.opts,\n\t\tmaskset = inputmask.maskset;\n\n\tvar validPsClone = $.extend(true, {}, maskset.validPositions),\n\t\ttstClone = $.extend(true, {}, maskset.tests),\n\t\tlastAlt,\n\t\talternation,\n\t\tisValidRslt = false, returnRslt = false,\n\t\taltPos, prevAltPos, i, validPos,\n\t\tdecisionPos,\n\t\tlAltPos = rAltPos !== undefined ? rAltPos : getLastValidPosition.call(inputmask), nextPos, input, begin, end;\n\n\tif (selection) {\n\t\tbegin = selection.begin;\n\t\tend = selection.end;\n\t\tif (selection.begin > selection.end) {\n\t\t\tbegin = selection.end;\n\t\t\tend = selection.begin;\n\t\t}\n\t}\n\tif (lAltPos === -1 && rAltPos === undefined) { //do not recurse when already paste the beginning\n\t\tlastAlt = 0;\n\t\tprevAltPos = getTest.call(inputmask, lastAlt);\n\t\talternation = prevAltPos.alternation;\n\t} else {\n\t\t//find last modified alternation\n\t\tfor (; lAltPos >= 0; lAltPos--) {\n\t\t\taltPos = maskset.validPositions[lAltPos];\n\t\t\tif (altPos && altPos.alternation !== undefined) {\n\t\t\t\tif (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tlastAlt = lAltPos;\n\t\t\t\talternation = maskset.validPositions[lastAlt].alternation;\n\t\t\t\tprevAltPos = altPos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (alternation !== undefined) {\n\t\tdecisionPos = parseInt(lastAlt);\n\t\tmaskset.excludes[decisionPos] = maskset.excludes[decisionPos] || [];\n\t\tif (maskPos !== true) { //generalize\n\t\t\tmaskset.excludes[decisionPos].push(getDecisionTaker(prevAltPos) + \":\" + prevAltPos.alternation);\n\t\t}\n\n\t\tvar validInputs = [], resultPos = -1;\n\t\tfor (i = decisionPos; i < getLastValidPosition.call(inputmask, undefined, true) + 1; i++) {\n\t\t\tif (resultPos === -1 && maskPos <= i && c !== undefined) {\n\t\t\t\tvalidInputs.push(c);\n\t\t\t\tresultPos = validInputs.length - 1;\n\t\t\t}\n\t\t\tvalidPos = maskset.validPositions[i];\n\t\t\tif (validPos && validPos.generatedInput !== true && (selection === undefined || (i < begin || i >= end))) {\n\t\t\t\tvalidInputs.push(validPos.input);\n\t\t\t}\n\t\t\tdelete maskset.validPositions[i];\n\t\t}\n\t\tif (resultPos === -1 && c !== undefined) {\n\t\t\tvalidInputs.push(c);\n\t\t\tresultPos = validInputs.length - 1;\n\t\t}\n\n\t\twhile (maskset.excludes[decisionPos] !== undefined && maskset.excludes[decisionPos].length < 10) {\n\t\t\t// maskset.tests[decisionPos] = undefined; //clear decisionPos\n\t\t\tmaskset.tests = {};  //clear all\n\t\t\tresetMaskSet.call(inputmask, true); //clear getbuffer\n\t\t\tisValidRslt = true;\n\t\t\tfor (i = 0; i < validInputs.length; i++) {\n\t\t\t\tnextPos = isValidRslt.caret || (getLastValidPosition.call(inputmask, undefined, true) + 1);\n\t\t\t\tinput = validInputs[i];\n\t\t\t\t// nextPos = translatePosition.call(inputmask, nextPos);\n\t\t\t\tif (!(isValidRslt = isValid.call(inputmask, nextPos, input, false, fromIsValid, true))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i === resultPos) {\n\t\t\t\t\treturnRslt = isValidRslt;\n\t\t\t\t}\n\t\t\t\tif (maskPos == true && isValidRslt) {  //return validposition on generalise\n\t\t\t\t\treturnRslt = {caretPos: i};\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isValidRslt) {\n\t\t\t\tresetMaskSet.call(inputmask);\n\t\t\t\tprevAltPos = getTest.call(inputmask, decisionPos);  //get the current decisionPos to exclude ~ needs to be before restoring the initial validation\n\t\t\t\t//reset & revert\n\t\t\t\tmaskset.validPositions = $.extend(true, {}, validPsClone);\n\t\t\t\tmaskset.tests = $.extend(true, {}, tstClone); //refresh tests after possible alternating\n\t\t\t\tif (maskset.excludes[decisionPos]) {\n\t\t\t\t\tvar decisionTaker = getDecisionTaker(prevAltPos);\n\t\t\t\t\tif (maskset.excludes[decisionPos].indexOf(decisionTaker + \":\" + prevAltPos.alternation) !== -1) {\n\t\t\t\t\t\treturnRslt = alternate.call(inputmask, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmaskset.excludes[decisionPos].push(decisionTaker + \":\" + prevAltPos.alternation);\n\t\t\t\t\tfor (i = decisionPos; i < getLastValidPosition.call(inputmask, undefined, true) + 1; i++) delete maskset.validPositions[i];\n\t\t\t\t} else { //latest alternation\n\t\t\t\t\treturnRslt = alternate.call(inputmask, maskPos, c, strict, fromIsValid, decisionPos - 1, selection);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t//reset alternation excludes\n\tif (!returnRslt || opts.keepStatic !== false) {\n\t\tdelete maskset.excludes[decisionPos];\n\t}\n\treturn returnRslt;\n}\n\nfunction casing(elem, test, pos) {\n\tconst opts = this.opts,\n\t\tmaskset = this.maskset;\n\n\tswitch (opts.casing || test.casing) {\n\t\tcase \"upper\":\n\t\t\telem = elem.toUpperCase();\n\t\t\tbreak;\n\t\tcase \"lower\":\n\t\t\telem = elem.toLowerCase();\n\t\t\tbreak;\n\t\tcase \"title\":\n\t\t\tvar posBefore = maskset.validPositions[pos - 1];\n\t\t\tif (pos === 0 || posBefore && posBefore.input === String.fromCharCode(keyCode.SPACE)) {\n\t\t\t\telem = elem.toUpperCase();\n\t\t\t} else {\n\t\t\t\telem = elem.toLowerCase();\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (typeof opts.casing === \"function\") {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments);\n\t\t\t\targs.push(maskset.validPositions);\n\t\t\t\telem = opts.casing.apply(this, args);\n\t\t\t}\n\t}\n\n\treturn elem;\n}\n\n//tobe put on prototype?\nfunction checkAlternationMatch(altArr1, altArr2, na) {\n\tconst opts = this.opts;\n\n\tvar altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1),\n\t\tisMatch = false,\n\t\tnaArr = na !== undefined ? na.split(\",\") : [],\n\t\tnaNdx;\n\n\t//remove no alternate indexes from alternation array\n\tfor (var i = 0; i < naArr.length; i++) {\n\t\tif ((naNdx = altArr1.indexOf(naArr[i])) !== -1) {\n\t\t\taltArr1.splice(naNdx, 1);\n\t\t}\n\t}\n\n\tfor (var alndx = 0; alndx < altArr1.length; alndx++) {\n\t\tif (altArrC.includes(altArr1[alndx])) {\n\t\t\tisMatch = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isMatch;\n}\n\n//tobe put on prototype?\nfunction handleRemove(input, k, pos, strict, fromIsValid) {\n\tconst inputmask = this, maskset = this.maskset, opts = this.opts;\n\n\tif (opts.numericInput || inputmask.isRTL) {\n\t\tif (k === keyCode.BACKSPACE) {\n\t\t\tk = keyCode.DELETE;\n\t\t} else if (k === keyCode.DELETE) {\n\t\t\tk = keyCode.BACKSPACE;\n\t\t}\n\n\t\tif (inputmask.isRTL) {\n\t\t\tvar pend = pos.end;\n\t\t\tpos.end = pos.begin;\n\t\t\tpos.begin = pend;\n\t\t}\n\t}\n\n\tvar lvp = getLastValidPosition.call(inputmask, undefined, true);\n\tif (pos.end >= getBuffer.call(inputmask).length && lvp >= pos.end) { //handle numeric negate symbol offset, due to  dynamic jit masking\n\t\tpos.end = lvp + 1;\n\t}\n\n\tif (k === keyCode.BACKSPACE) {\n\t\tif ((pos.end - pos.begin < 1)) {\n\t\t\tpos.begin = seekPrevious.call(inputmask, pos.begin);\n\t\t}\n\t} else if (k === keyCode.DELETE) {\n\t\tif (pos.begin === pos.end) {\n\t\t\tpos.end = isMask.call(inputmask, pos.end, true, true) ? pos.end + 1 : seekNext.call(inputmask, pos.end) + 1;\n\t\t}\n\t}\n\tvar offset;\n\tif ((offset = revalidateMask.call(inputmask, pos)) !== false) {\n\t\tif (strict !== true && opts.keepStatic !== false || (opts.regex !== null && getTest.call(inputmask, pos.begin).match.def.indexOf(\"|\") !== -1)) { //TODO NEEDS BETTER CHECK WHEN TO ALTERNATE  ~ opts regex isn\"t good enough\n\t\t\tvar result = alternate.call(inputmask, true);\n\t\t\tif (result) {\n\t\t\t\tvar newPos = result.caret !== undefined ? result.caret : (result.pos ? seekNext.call(inputmask, result.pos.begin ? result.pos.begin : result.pos) : getLastValidPosition.call(inputmask, -1, true));\n\t\t\t\tif (k !== keyCode.DELETE || pos.begin > newPos) {\n\t\t\t\t\tpos.begin == newPos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (strict !== true) {\n\t\t\tmaskset.p = k === keyCode.DELETE ? pos.begin + offset : pos.begin;\n\t\t\tmaskset.p = determineNewCaretPosition.call(inputmask, {\n\t\t\t\tbegin: maskset.p,\n\t\t\t\tend: maskset.p\n\t\t\t}, false).begin;\n\t\t}\n\t}\n}\n\n//tobe put on prototype?\nfunction isComplete(buffer) { //return true / false / undefined (repeat *)\n\tconst inputmask = this, opts = this.opts, maskset = this.maskset;\n\n\tif (typeof opts.isComplete === \"function\") return opts.isComplete(buffer, opts);\n\tif (opts.repeat === \"*\") return undefined;\n\tvar complete = false,\n\t\tlrp = determineLastRequiredPosition.call(inputmask, true),\n\t\taml = seekPrevious.call(inputmask, lrp.l);\n\n\tif (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {\n\t\tcomplete = true;\n\t\tfor (var i = 0; i <= aml; i++) {\n\t\t\tvar test = getTestTemplate.call(inputmask, i).match;\n\t\t\tif ((test.static !== true && maskset.validPositions[i] === undefined && test.optionality !== true && test.optionalQuantifier !== true) || (test.static === true && buffer[i] !== getPlaceholder.call(inputmask, i, test))) {\n\t\t\t\tcomplete = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn complete;\n}\n\n//tobe put on prototype?\nfunction isValid(pos, c, strict, fromIsValid, fromAlternate, validateOnly, fromCheckval) { //strict true ~ no correction or autofill\n\tconst inputmask = this,\n\t\t$ = this.dependencyLib,\n\t\topts = this.opts,\n\t\tmaskset = inputmask.maskset;\n\n\tfunction isSelection(posObj) {\n\t\treturn inputmask.isRTL ? (posObj.begin - posObj.end) > 1 || ((posObj.begin - posObj.end) === 1) :\n\t\t\t(posObj.end - posObj.begin) > 1 || ((posObj.end - posObj.begin) === 1);\n\t}\n\n\tstrict = strict === true; //always set a value to strict to prevent possible strange behavior in the extensions\n\n\tvar maskPos = pos;\n\tif (pos.begin !== undefined) { //position was a position object - used to handle a delete by typing over a selection\n\t\tmaskPos = inputmask.isRTL ? pos.end : pos.begin;\n\t}\n\n\tfunction processCommandObject(commandObj) {\n\t\tif (commandObj !== undefined) {\n\t\t\tif (commandObj.remove !== undefined) { //remove position(s)\n\t\t\t\tif (!Array.isArray(commandObj.remove)) commandObj.remove = [commandObj.remove];\n\t\t\t\tcommandObj.remove.sort(function (a, b) {\n\t\t\t\t\treturn b.pos - a.pos;\n\t\t\t\t}).forEach(function (lmnt) {\n\t\t\t\t\trevalidateMask.call(inputmask, {begin: lmnt, end: lmnt + 1});\n\t\t\t\t});\n\t\t\t\tcommandObj.remove = undefined;\n\t\t\t}\n\t\t\tif (commandObj.insert !== undefined) { //insert position(s)\n\t\t\t\tif (!Array.isArray(commandObj.insert)) commandObj.insert = [commandObj.insert];\n\t\t\t\tcommandObj.insert.sort(function (a, b) {\n\t\t\t\t\treturn a.pos - b.pos;\n\t\t\t\t}).forEach(function (lmnt) {\n\t\t\t\t\tif (lmnt.c !== \"\") {\n\t\t\t\t\t\tisValid.call(inputmask, lmnt.pos, lmnt.c, lmnt.strict !== undefined ? lmnt.strict : true, lmnt.fromIsValid !== undefined ? lmnt.fromIsValid : fromIsValid);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tcommandObj.insert = undefined;\n\t\t\t}\n\n\t\t\tif (commandObj.refreshFromBuffer && commandObj.buffer) {\n\t\t\t\tvar refresh = commandObj.refreshFromBuffer;\n\t\t\t\trefreshFromBuffer.call(inputmask, refresh === true ? refresh : refresh.start, refresh.end, commandObj.buffer);\n\t\t\t\tcommandObj.refreshFromBuffer = undefined;\n\t\t\t}\n\n\t\t\tif (commandObj.rewritePosition !== undefined) {\n\t\t\t\tmaskPos = commandObj.rewritePosition;\n\t\t\t\t// commandObj.rewritePosition = undefined;\n\t\t\t\tcommandObj = true;\n\t\t\t}\n\t\t}\n\t\treturn commandObj;\n\t}\n\n\tfunction _isValid(position, c, strict) {\n\t\tvar rslt = false;\n\t\tgetTests.call(inputmask, position).every(function (tst, ndx) {\n\t\t\tvar test = tst.match;\n\t\t\t//make sure the buffer is set and correct\n\t\t\tgetBuffer.call(inputmask, true);\n\t\t\tif (test.jit && maskset.validPositions[seekPrevious.call(inputmask, position)] === undefined) //ignore if jit is not desirable\n\t\t\t{\n\t\t\t\trslt = false;\n\t\t\t} else {\n\t\t\t\t//return is false or a json object => { pos: ??, c: ??} or true\n\t\t\t\trslt = test.fn != null ?\n\t\t\t\t\ttest.fn.test(c, maskset, position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && test.def !== \"\" ? //non mask\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tc: getPlaceholder.call(inputmask, position, test, true) || test.def,\n\t\t\t\t\t\t\tpos: position\n\t\t\t\t\t\t} : false;\n\t\t\t}\n\t\t\tif (rslt !== false) {\n\t\t\t\tvar elem = rslt.c !== undefined ? rslt.c : c, validatedPos = position;\n\t\t\t\telem = (elem === opts.skipOptionalPartCharacter && test.static === true) ?\n\t\t\t\t\t(getPlaceholder.call(inputmask, position, test, true) || test.def) : elem;\n\n\t\t\t\trslt = processCommandObject(rslt);\n\n\t\t\t\tif (rslt !== true && rslt.pos !== undefined && rslt.pos !== position) { //their is a position offset\n\t\t\t\t\tvalidatedPos = rslt.pos;\n\t\t\t\t}\n\n\t\t\t\tif (rslt !== true && rslt.pos === undefined && rslt.c === undefined) {\n\t\t\t\t\treturn false; //breakout if nothing to insert\n\t\t\t\t}\n\n\t\t\t\tif (revalidateMask.call(inputmask, pos, $.extend({}, tst, {\n\t\t\t\t\t\"input\": casing.call(inputmask, elem, test, validatedPos)\n\t\t\t\t}), fromIsValid, validatedPos) === false) {\n\t\t\t\t\trslt = false;\n\t\t\t\t}\n\t\t\t\treturn false; //break from loop\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t\treturn rslt;\n\t}\n\n\tvar result = true,\n\t\tpositionsClone = $.extend(true, {}, maskset.validPositions); //clone the currentPositions\n\n\tif (opts.keepStatic === false && maskset.excludes[maskPos] !== undefined && fromAlternate !== true && fromIsValid !== true) {\n\t\tfor (var i = maskPos; i < (inputmask.isRTL ? pos.begin : pos.end); i++) {\n\t\t\tif (maskset.excludes[i] !== undefined) {\n\t\t\t\tmaskset.excludes[i] = undefined;\n\t\t\t\tdelete maskset.tests[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof opts.preValidation === \"function\" && fromIsValid !== true && validateOnly !== true) {\n\t\tresult = opts.preValidation.call(inputmask, getBuffer.call(inputmask), maskPos, c, isSelection(pos), opts, maskset, pos, strict || fromAlternate);\n\t\tresult = processCommandObject(result);\n\t}\n\tif (result === true) { //preValidation result\n\t\tresult = _isValid(maskPos, c, strict);\n\t\tif ((!strict || fromIsValid === true) && result === false && validateOnly !== true) {\n\t\t\tvar currentPosValid = maskset.validPositions[maskPos];\n\t\t\tif (currentPosValid && currentPosValid.match.static === true && (currentPosValid.match.def === c || c === opts.skipOptionalPartCharacter)) {\n\t\t\t\tresult = {\n\t\t\t\t\t\"caret\": seekNext.call(inputmask, maskPos)\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tif (opts.insertMode || maskset.validPositions[seekNext.call(inputmask, maskPos)] === undefined || pos.end > maskPos) { //does the input match on a further position?\n\t\t\t\t\tvar skip = false;\n\t\t\t\t\tif (maskset.jitOffset[maskPos] && maskset.validPositions[seekNext.call(inputmask, maskPos)] === undefined) {\n\t\t\t\t\t\tresult = isValid.call(inputmask, maskPos + maskset.jitOffset[maskPos], c, true, true);\n\t\t\t\t\t\tif (result !== false) {\n\t\t\t\t\t\t\tif (fromAlternate !== true) result.caret = maskPos;\n\t\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pos.end > maskPos) {\n\t\t\t\t\t\tmaskset.validPositions[maskPos] = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (!skip && !isMask.call(inputmask, maskPos, opts.keepStatic && maskPos === 0)) {\n\t\t\t\t\t\tfor (var nPos = maskPos + 1, snPos = seekNext.call(inputmask, maskPos, false, maskPos !== 0); nPos <= snPos; nPos++) {\n\t\t\t\t\t\t\t// if (!isMask(nPos, true)) {\n\t\t\t\t\t\t\t// \tcontinue;\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\tresult = _isValid(nPos, c, strict);\n\t\t\t\t\t\t\tif (result !== false) {\n\t\t\t\t\t\t\t\tresult = trackbackPositions.call(inputmask, maskPos, result.pos !== undefined ? result.pos : nPos) || result;\n\t\t\t\t\t\t\t\tmaskPos = nPos;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (result === false && opts.keepStatic && (isComplete.call(inputmask, getBuffer.call(inputmask)) || maskPos === 0) && !strict && fromAlternate !== true) { //try fuzzy alternator logic\n\t\t\tresult = alternate.call(inputmask, maskPos, c, strict, fromIsValid, undefined, pos);\n\t\t} else if (isSelection(pos) && maskset.tests[maskPos] && maskset.tests[maskPos].length > 1 && opts.keepStatic && !strict && fromAlternate !== true) { //selection clears an alternated keepstatic mask ~ #2189\n\t\t\tresult = alternate.call(inputmask, true);\n\t\t}\n\n\t\tif (result === true) {\n\t\t\tresult = {\n\t\t\t\t\"pos\": maskPos\n\t\t\t};\n\t\t}\n\t}\n\tif (typeof opts.postValidation === \"function\" && fromIsValid !== true && validateOnly !== true) {\n\t\tvar postResult = opts.postValidation.call(inputmask, getBuffer.call(inputmask, true), pos.begin !== undefined ? (inputmask.isRTL ? pos.end : pos.begin) : pos, c, result, opts, maskset, strict, fromCheckval);\n\t\tif (postResult !== undefined) {\n\t\t\tresult = postResult === true ? result : postResult;\n\t\t}\n\t}\n\n\tif (result && result.pos === undefined) {\n\t\tresult.pos = maskPos;\n\t}\n\n\tif (result === false || validateOnly === true) {\n\t\tresetMaskSet.call(inputmask, true);\n\t\tmaskset.validPositions = $.extend(true, {}, positionsClone); //revert validation changes\n\t} else {\n\t\ttrackbackPositions.call(inputmask, undefined, maskPos, true);\n\t}\n\n\tvar endResult = processCommandObject(result);\n\t// console.log(\"returned result \" + JSON.stringify(endResult));\n\tif (inputmask.maxLength !== undefined) {\n\t\tvar buffer = getBuffer.call(inputmask);\n\t\tif (buffer.length > inputmask.maxLength && !fromIsValid) {\n\t\t\tresetMaskSet.call(inputmask, true);\n\t\t\tmaskset.validPositions = $.extend(true, {}, positionsClone); //revert validation changes\n\t\t\tendResult = false;\n\t\t}\n\t}\n\treturn endResult;\n}\n\n//tobe put on prototype?\nfunction positionCanMatchDefinition(pos, testDefinition, opts) {\n\tconst inputmask = this,\n\t\tmaskset = this.maskset;\n\n\tvar valid = false,\n\t\ttests = getTests.call(inputmask, pos);\n\tfor (var tndx = 0; tndx < tests.length; tndx++) {\n\t\tif (tests[tndx].match &&\n\t\t\t((tests[tndx].match[\"nativeDef\"] === testDefinition.match[opts.shiftPositions ? \"def\" : \"nativeDef\"] && (!opts.shiftPositions || !testDefinition.match.static)) ||\n\t\t\t\ttests[tndx].match[\"nativeDef\"] === testDefinition.match[\"nativeDef\"] || (opts.regex && !tests[tndx].match.static && tests[tndx].match.fn.test(testDefinition.input)))) {\n\t\t\tvalid = true;\n\t\t\tbreak;\n\t\t} else if (tests[tndx].match && tests[tndx].match[\"def\"] === testDefinition.match[\"nativeDef\"]) {\n\t\t\tvalid = undefined;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (valid === false) {\n\t\tif (maskset.jitOffset[pos] !== undefined) {\n\t\t\tvalid = positionCanMatchDefinition.call(inputmask, pos + maskset.jitOffset[pos], testDefinition, opts);\n\t\t}\n\t}\n\treturn valid;\n}\n\n//tobe put on prototype?\nfunction refreshFromBuffer(start, end, buffer) {\n\tconst inputmask = this,\n\t\tmaskset = this.maskset,\n\t\topts = this.opts,\n\t\t$ = this.dependencyLib;\n\t// checkVal.call(inputmask, el, false, true, isRTL ? buffer.reverse() : buffer);\n\tvar i, p, skipOptionalPartCharacter = opts.skipOptionalPartCharacter,\n\t\tbffr = inputmask.isRTL ? buffer.slice().reverse() : buffer;\n\topts.skipOptionalPartCharacter = \"\";\n\tif (start === true) {\n\t\tresetMaskSet.call(inputmask);\n\t\tmaskset.tests = {}; //refresh tests after possible alternating\n\t\tstart = 0;\n\t\tend = buffer.length;\n\t\tp = determineNewCaretPosition.call(inputmask, {begin: 0, end: 0}, false).begin;\n\t} else {\n\t\tfor (i = start; i < end; i++) {\n\t\t\tdelete maskset.validPositions[i];\n\t\t}\n\t\tp = start;\n\t}\n\n\tvar keypress = new $.Event(\"keypress\");\n\tfor (i = start; i < end; i++) {\n\t\tkeypress.which = bffr[i].toString().charCodeAt(0);\n\t\tinputmask.ignorable = false; //make sure ignorable is ignored ;-)\n\t\tvar valResult = EventHandlers.keypressEvent.call(inputmask, keypress, true, false, false, p);\n\t\tif (valResult !== false && valResult !== undefined) {\n\t\t\tp = valResult.forwardPosition;\n\t\t}\n\t}\n\n\topts.skipOptionalPartCharacter = skipOptionalPartCharacter;\n}\n\n//tobe put on prototype?\n//fill in best positions according the current input\nfunction trackbackPositions(originalPos, newPos, fillOnly) {\n\tconst inputmask = this,\n\t\tmaskset = this.maskset,\n\t\t$ = this.dependencyLib;\n\n\t// console.log(\"trackbackPositions \" + originalPos + \" \" + newPos);\n\tif (originalPos === undefined) {\n\t\t//find previous valid\n\t\tfor (originalPos = newPos - 1; originalPos > 0; originalPos--) {\n\t\t\tif (maskset.validPositions[originalPos]) break;\n\t\t}\n\t}\n\tfor (var ps = originalPos; ps < newPos; ps++) {\n\t\tif (maskset.validPositions[ps] === undefined && !isMask.call(inputmask, ps, false)) {\n\t\t\tvar vp = ps == 0 ? getTest.call(inputmask, ps) : maskset.validPositions[ps - 1];\n\t\t\tif (vp) {\n\t\t\t\tvar tests = getTests.call(inputmask, ps).slice();\n\t\t\t\tif (tests[tests.length - 1].match.def === \"\") tests.pop();\n\t\t\t\tvar bestMatch = determineTestTemplate.call(inputmask, ps, tests), np;\n\t\t\t\tif (bestMatch && (bestMatch.match.jit !== true || (bestMatch.match.newBlockMarker === \"master\" && (np = maskset.validPositions[ps + 1]) && np.match.optionalQuantifier === true))) {\n\t\t\t\t\tbestMatch = $.extend({}, bestMatch, {\n\t\t\t\t\t\t\"input\": getPlaceholder.call(inputmask, ps, bestMatch.match, true) || bestMatch.match.def\n\t\t\t\t\t});\n\t\t\t\t\tbestMatch.generatedInput = true;\n\t\t\t\t\trevalidateMask.call(inputmask, ps, bestMatch, true);\n\n\t\t\t\t\tif (fillOnly !== true) {\n\t\t\t\t\t\t//revalidate the new position to update the locator value\n\t\t\t\t\t\tvar cvpInput = maskset.validPositions[newPos].input;\n\t\t\t\t\t\tmaskset.validPositions[newPos] = undefined;\n\t\t\t\t\t\treturn isValid.call(inputmask, newPos, cvpInput, true, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//tobe put on prototype?\nfunction revalidateMask(pos, validTest, fromIsValid, validatedPos) {\n\tconst inputmask = this,\n\t\tmaskset = this.maskset,\n\t\topts = this.opts,\n\t\t$ = this.dependencyLib;\n\n\tfunction IsEnclosedStatic(pos, valids, selection) {\n\t\tvar posMatch = valids[pos];\n\t\tif (posMatch !== undefined && posMatch.match.static === true && posMatch.match.optionality !== true && (valids[0] === undefined || valids[0].alternation === undefined)) {\n\t\t\tvar prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && valids[pos - 1].match.static === true && valids[pos - 1] : valids[pos - 1],\n\t\t\t\tnextMatch = selection.end > pos + 1 ? valids[pos + 1] && valids[pos + 1].match.static === true && valids[pos + 1] : valids[pos + 1];\n\t\t\treturn prevMatch && nextMatch;\n\t\t}\n\t\treturn false;\n\t}\n\n\tvar offset = 0, begin = pos.begin !== undefined ? pos.begin : pos, end = pos.end !== undefined ? pos.end : pos,\n\t\tvalid = true;\n\tif (pos.begin > pos.end) {\n\t\tbegin = pos.end;\n\t\tend = pos.begin;\n\t}\n\n\tvalidatedPos = validatedPos !== undefined ? validatedPos : begin;\n\tif (begin !== end || (opts.insertMode && maskset.validPositions[validatedPos] !== undefined && fromIsValid === undefined) || validTest === undefined) {\n\t\t//reposition & revalidate others\n\t\tvar positionsClone = $.extend(true, {}, maskset.validPositions),\n\t\t\tlvp = getLastValidPosition.call(inputmask, undefined, true),\n\t\t\ti;\n\t\tmaskset.p = begin; //needed for alternated position after overtype selection\n\n\t\tfor (i = lvp; i >= begin; i--) {\n\t\t\tdelete maskset.validPositions[i];\n\t\t\tif (validTest === undefined) delete maskset.tests[i + 1];\n\t\t}\n\n\t\tvar j = validatedPos,\n\t\t\tposMatch = j, t, canMatch;\n\n\t\tif (validTest) {\n\t\t\tmaskset.validPositions[validatedPos] = $.extend(true, {}, validTest);\n\t\t\tposMatch++;\n\t\t\tj++;\n\t\t}\n\n\t\tfor (i = validTest ? end : end - 1; i <= lvp; i++) {\n\t\t\tif ((t = positionsClone[i]) !== undefined && t.generatedInput !== true &&\n\t\t\t\t(i >= end || (i >= begin && IsEnclosedStatic(i, positionsClone, {\n\t\t\t\t\tbegin: begin,\n\t\t\t\t\tend: end\n\t\t\t\t})))) {\n\t\t\t\twhile (getTest.call(inputmask, posMatch).match.def !== \"\") { //loop needed to match further positions\n\t\t\t\t\tif ((canMatch = positionCanMatchDefinition.call(inputmask, posMatch, t, opts)) !== false || t.match.def === \"+\") { //validated match //we still need some hackery for the + validator (numeric alias)\n\t\t\t\t\t\tif (t.match.def === \"+\") getBuffer.call(inputmask, true);\n\t\t\t\t\t\tvar result = isValid.call(inputmask, posMatch, t.input, t.match.def !== \"+\", /*t.match.def !== \"+\"*/ true);\n\t\t\t\t\t\tvalid = result !== false;\n\t\t\t\t\t\tj = (result.pos || posMatch) + 1;\n\t\t\t\t\t\tif (!valid && canMatch) break;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (valid) {\n\t\t\t\t\t\tif (validTest === undefined && t.match.static && i === pos.begin) offset++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!valid && posMatch > maskset.maskLength) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tposMatch++;\n\t\t\t\t}\n\t\t\t\tif (getTest.call(inputmask, posMatch).match.def == \"\") {\n\t\t\t\t\tvalid = false;\n\t\t\t\t}\n\t\t\t\t//restore position\n\t\t\t\tposMatch = j;\n\t\t\t}\n\t\t\tif (!valid) break;\n\t\t}\n\t\tif (!valid) {\n\t\t\tmaskset.validPositions = $.extend(true, {}, positionsClone);\n\t\t\tresetMaskSet.call(inputmask, true);\n\t\t\treturn false;\n\t\t}\n\t} else if (validTest && getTest.call(inputmask, validatedPos).match.cd === validTest.match.cd) {\n\t\tmaskset.validPositions[validatedPos] = $.extend(true, {}, validTest);\n\t}\n\n\tresetMaskSet.call(inputmask, true);\n\treturn offset;\n}\n"],"sourceRoot":""}